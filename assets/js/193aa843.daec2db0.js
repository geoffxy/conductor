"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[566],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return c}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=l(t),c=a,k=d["".concat(s,".").concat(c)]||d[c]||u[c]||i;return t?r.createElement(k,o(o({ref:n},m),{},{components:t})):r.createElement(k,o({ref:n},m))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4478:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return m},default:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],p={title:"run_experiment_group()",id:"run-experiment-group"},s=void 0,l={unversionedId:"task-types/run-experiment-group",id:"task-types/run-experiment-group",title:"run_experiment_group()",description:"A runexperimentgroup() task lets you specify a list of experiments that",source:"@site/docs/task-types/run-experiment-group.md",sourceDirName:"task-types",slug:"/task-types/run-experiment-group",permalink:"/conductor/task-types/run-experiment-group",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/run-experiment-group.md",tags:[],version:"current",frontMatter:{title:"run_experiment_group()",id:"run-experiment-group"},sidebar:"docs",previous:{title:"group()",permalink:"/conductor/task-types/group"},next:{title:"Command Line Interface",permalink:"/conductor/cli"}},m=[{value:"Arguments",id:"arguments",children:[{value:"<code>name</code>",id:"name",children:[],level:3},{value:"<code>run</code>",id:"run",children:[],level:3},{value:"<code>experiments</code>",id:"experiments",children:[],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3}],level:2},{value:"Usage Example",id:"usage-example",children:[],level:2}],u={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"run_experiment_group(name, run, experiments=[], deps=[])\n")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment_group()")," task lets you specify a list of experiments that\nshare the same ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command and dependencies. In other words, a\n",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment_group()")," task is a concise way of defining a list of\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()"))," tasks that all have the same\n",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command and ",(0,i.kt)("inlineCode",{parentName:"p"},"deps")," but differ in their ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"options"),". The\nindividual experiments are all versioned and archivable, just as if they were\n",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()")," tasks. After the experiments execute successfully, their\noutputs are copied into a single output directory (using the same semantics as\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/combine"},(0,i.kt)("inlineCode",{parentName:"a"},"combine()")),")."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment_group()")," task type is actually just syntactic sugar.\nConductor implements this task type by transforming its experiments list into\n",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()")," tasks and a single ",(0,i.kt)("inlineCode",{parentName:"p"},"combine()")," task (see the ",(0,i.kt)("a",{parentName:"p",href:"#usage-example"},"usage\nexample"),")."),(0,i.kt)("p",null,'A common use case for this task type is running experiments where you need to\n"sweep" over one or more parameters.'),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("h3",{id:"name"},(0,i.kt)("inlineCode",{parentName:"h3"},"name")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,i.kt)("p",null,"The task's name. This name must be unique within the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file. A task\nname can only contain letters, numbers, hyphens (",(0,i.kt)("inlineCode",{parentName:"p"},"-"),"), and underscores (",(0,i.kt)("inlineCode",{parentName:"p"},"_"),")."),(0,i.kt)("h3",{id:"run"},(0,i.kt)("inlineCode",{parentName:"h3"},"run")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,i.kt)("p",null,"The command to execute when running the experiments in this task. This command\nwill be executed using ",(0,i.kt)("inlineCode",{parentName:"p"},"bash"),", with the location of the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file as\nthe shell's working directory. In other words, any relative paths in the command\nwill be interpreted as relative to the directory containing the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND"),"\nfile."),(0,i.kt)("p",null,"Conductor uses the exit code of the command to determine whether it succeeded or\nfailed. If the command succeeds, it should exit with an exit code of ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),".\nConductor interprets any non-zero exit code as a failure. If a task fails, it\nprevents any other tasks that depend on it from executing (see the reference for\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/cli/run"},(0,i.kt)("inlineCode",{parentName:"a"},"cond run")),")."),(0,i.kt)("h3",{id:"experiments"},(0,i.kt)("inlineCode",{parentName:"h3"},"experiments")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," List of ",(0,i.kt)("inlineCode",{parentName:"p"},"ExperimentInstance"),"s (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"ExperimentInstance(name, args=[], options={}, parallelizable=False)\n")),(0,i.kt)("p",null,"The arguments that ",(0,i.kt)("inlineCode",{parentName:"p"},"ExperimentInstance()")," takes have the same semantics as the\narguments listed in the ",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()"),"\nreference"),"."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," used for each ",(0,i.kt)("inlineCode",{parentName:"p"},"ExperimentInstance")," must be unique in the ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file.\nEach ",(0,i.kt)("inlineCode",{parentName:"p"},"ExperimentInstance")," ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," must also be different from the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," used for\nthe experiment's enclosing ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment_group()"),"."))),(0,i.kt)("h3",{id:"deps"},(0,i.kt)("inlineCode",{parentName:"h3"},"deps")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," List of task identifiers (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,i.kt)("p",null,"A list of task identifiers that all experiments in this task should depend on.\nConductor will ensure that all dependencies execute successfully before\nlaunching this task."),(0,i.kt)("p",null,"When depending on tasks defined in the same ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file, you can just specify\nthe task's name prefixed by a colon (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},":compile")," would refer to a task\nnamed ",(0,i.kt)("inlineCode",{parentName:"p"},"compile")," defined in the same file). If you need to depend on a task\ndefined in a different ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file, you must specify the fully qualified task\nidentifier (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"//experiments:benchmark")," would refer to a task named\n",(0,i.kt)("inlineCode",{parentName:"p"},"benchmark")," defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"experiments")," directory)."),(0,i.kt)("h2",{id:"usage-example"},"Usage Example"),(0,i.kt)("p",null,"In this example, we define a ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment_group()")," task that runs\n",(0,i.kt)("inlineCode",{parentName:"p"},"./run_benchmark.sh")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"--threads")," set to 1 and 2. Since ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," files are\ninterpreted as Python code, you can use Python's language features to help you\ndefine your tasks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="COND"',title:'"COND"'},'run_experiment_group(\n  name="sweep",\n  run="./run_benchmark.sh",\n  experiments=[\n    ExperimentInstance(\n      name="sweep-{}".format(threads),\n      options={\n        "threads": threads,\n      },\n      parallelizable=False,\n    )\n    # COND files are interpreted as Python code. So, you can use list\n    # comprehension when defining your experiments.\n    for threads in range(1, 3)\n  ],\n  deps=[\n    ":compile",\n  ],\n)\n')),(0,i.kt)("p",null,"Internally, Conductor translates the above task definition into"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'run_experiment(\n  name="sweep-1",\n  run="./run_benchmark.sh",\n  options={\n    "threads": 1,\n  },\n  parallelizable=False,\n  deps=[":compile"],\n)\n\nrun_experiment(\n  name="sweep-2",\n  run="./run_benchmark.sh",\n  options={\n    "threads": 2,\n  },\n  parallelizable=False,\n  deps=[":compile"],\n)\n\ncombine(\n  name="sweep",\n  deps=[\n    ":sweep-1",\n    ":sweep-2",\n  ],\n)\n')))}d.isMDXComponent=!0}}]);