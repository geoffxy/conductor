"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[591],{2635:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>d,toc:()=>a});var t=s(4848),i=s(8453);const c={title:"combine()",id:"combine"},o=void 0,d={id:"task-types/combine",title:"combine()",description:"A combine() task copies the output files of its dependencies into a single",source:"@site/docs/task-types/combine.md",sourceDirName:"task-types",slug:"/task-types/combine",permalink:"/conductor/task-types/combine",draft:!1,unlisted:!1,editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/combine.md",tags:[],version:"current",frontMatter:{title:"combine()",id:"combine"},sidebar:"docs",previous:{title:"run_command()",permalink:"/conductor/task-types/run-command"},next:{title:"group()",permalink:"/conductor/task-types/group"}},r={},a=[{value:"Arguments",id:"arguments",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>deps</code>",id:"deps",level:3},{value:"Usage Example",id:"usage-example",level:2}];function l(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"combine(name, deps=[])\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"combine()"})," task copies the output files of its dependencies into a single\ndirectory (the ",(0,t.jsx)(n.code,{children:"combine()"})," task's output directory). The task's output directory\nwill contain one subdirectory for each of its dependencies, each containing the\ndependency's output files."]}),"\n",(0,t.jsxs)(n.p,{children:['A common use case for this task is to "combine" the outputs of multiple related\ntasks. For example, if you use different scripts to generate a collection of\nfigures, you can use a ',(0,t.jsx)(n.code,{children:"combine()"})," task to copy the generated figures into a\nsingle directory."]}),"\n",(0,t.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsx)(n.h3,{id:"name",children:(0,t.jsx)(n.code,{children:"name"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," String (required)"]}),"\n",(0,t.jsxs)(n.p,{children:["The task's name. This name must be unique within the task's ",(0,t.jsx)(n.code,{children:"COND"})," file. A task\nname can only contain letters, numbers, hyphens (",(0,t.jsx)(n.code,{children:"-"}),"), and underscores (",(0,t.jsx)(n.code,{children:"_"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"deps",children:(0,t.jsx)(n.code,{children:"deps"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," List of task identifiers (default: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"A list of task identifiers that this task should depend on. Conductor will\nensure that all dependencies execute successfully before launching this task."}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["The dependencies listed in a ",(0,t.jsx)(n.code,{children:"combine()"})," task must have unique ",(0,t.jsx)(n.em,{children:"names"}),". This is\nbecause a ",(0,t.jsx)(n.code,{children:"combine()"})," task creates a subdirectory for each dependency using the\ndependency's name."]}),(0,t.jsxs)(n.p,{children:["For example, the task identifiers ",(0,t.jsx)(n.code,{children:"//foo:build"})," and ",(0,t.jsx)(n.code,{children:"//bar:build"})," are distinct,\nbut they share the same name and thus cannot both be listed as a dependency in a\n",(0,t.jsx)(n.code,{children:"combine()"})," task."]})]}),"\n",(0,t.jsxs)(n.p,{children:["When depending on tasks defined in the same ",(0,t.jsx)(n.code,{children:"COND"})," file, you can just specify\nthe task's name prefixed by a colon (e.g., ",(0,t.jsx)(n.code,{children:":compile"})," would refer to a task\nnamed ",(0,t.jsx)(n.code,{children:"compile"})," defined in the same file). If you need to depend on a task\ndefined in a different ",(0,t.jsx)(n.code,{children:"COND"})," file, you must specify the fully qualified task\nidentifier (e.g., ",(0,t.jsx)(n.code,{children:"//experiments:benchmark"})," would refer to a task named\n",(0,t.jsx)(n.code,{children:"benchmark"})," defined in the ",(0,t.jsx)(n.code,{children:"COND"})," file in the ",(0,t.jsx)(n.code,{children:"experiments"})," directory)."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="COND"',children:'combine(\n  name="make_figures",\n  deps=[\n    ":make_figure1",\n    ":make_figure2",\n  ],\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This task's output directory will contain two subdirectories: ",(0,t.jsx)(n.code,{children:"make_figure1"})," and\n",(0,t.jsx)(n.code,{children:"make_figure2"}),". The subdirectories will contain the outputs from the\n",(0,t.jsx)(n.code,{children:":make_figure1"})," and ",(0,t.jsx)(n.code,{children:":make_figure2"})," tasks respectively."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var t=s(6540);const i={},c=t.createContext(i);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);