"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[285],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6509:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"run_command()",id:"run-command"},s=void 0,p={unversionedId:"task-types/run-command",id:"task-types/run-command",title:"run_command()",description:"A run_command() task runs the command specified in the run argument. The",source:"@site/docs/task-types/run-command.md",sourceDirName:"task-types",slug:"/task-types/run-command",permalink:"/conductor/task-types/run-command",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/run-command.md",tags:[],version:"current",frontMatter:{title:"run_command()",id:"run-command"},sidebar:"docs",previous:{title:"run_experiment()",permalink:"/conductor/task-types/run-experiment"},next:{title:"combine()",permalink:"/conductor/task-types/combine"}},u=[{value:"Arguments",id:"arguments",children:[{value:"<code>name</code>",id:"name",children:[],level:3},{value:"<code>run</code>",id:"run",children:[],level:3},{value:"<code>parallelizable</code>",id:"parallelizable",children:[],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3}],level:2},{value:"Usage Example",id:"usage-example",children:[],level:2}],d={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"run_command(name, run, parallelizable=False, deps=[])\n")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"run_command()")," task runs the command specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," argument. The\ndifference between this task type and\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()"))," is that the outputs from this\ntask are not versioned (nor are they archivable). A ",(0,i.kt)("inlineCode",{parentName:"p"},"run_command()")," task is\nusually well-suited for orchestrating the environment setup and data\ntransformation steps of your research computing pipeline (e.g., compiling\nexecutables or generating figures from benchmark results)."),(0,i.kt)("p",null,"All files that this task produces should be written to the path given in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"COND_OUT")," environment variable. This ensures that other tasks that depend on\nthis task can find this task's produced files."),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("h3",{id:"name"},(0,i.kt)("inlineCode",{parentName:"h3"},"name")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,i.kt)("p",null,"The task's name. This name must be unique within the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file. A task\nname can only contain letters, numbers, hyphens (",(0,i.kt)("inlineCode",{parentName:"p"},"-"),"), and underscores (",(0,i.kt)("inlineCode",{parentName:"p"},"_"),")."),(0,i.kt)("h3",{id:"run"},(0,i.kt)("inlineCode",{parentName:"h3"},"run")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,i.kt)("p",null,"The command to execute when running this task. This command will be executed\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"bash"),", with the location of the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file as the shell's working\ndirectory. In other words, any relative paths in the command will be interpreted\nas relative to the directory containing the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file."),(0,i.kt)("p",null,"Conductor uses the exit code of the command to determine whether it succeeded or\nfailed. If the command succeeds, it should exit with an exit code of ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),".\nConductor interprets any non-zero exit code as a failure. If a task fails, it\nprevents any other tasks that depend on it from executing (see the reference for\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/cli/run"},(0,i.kt)("inlineCode",{parentName:"a"},"cond run")),")."),(0,i.kt)("h3",{id:"parallelizable"},(0,i.kt)("inlineCode",{parentName:"h3"},"parallelizable")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," Boolean (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),")"),(0,i.kt)("p",null,"If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),", Conductor may launch this task while other ",(0,i.kt)("inlineCode",{parentName:"p"},"parallelizable"),"\ntasks are running. You should set this argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if it is okay for this\ntask to execute while other tasks are also running."),(0,i.kt)("p",null,"By default, tasks are not ",(0,i.kt)("inlineCode",{parentName:"p"},"parallelizable"),", and so Conductor will not launch a\nnew task until the previously launched task has completed (or failed)."),(0,i.kt)("h3",{id:"deps"},(0,i.kt)("inlineCode",{parentName:"h3"},"deps")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," List of task identifiers (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,i.kt)("p",null,"A list of task identifiers that this task should depend on. Conductor will\nensure that all dependencies execute successfully before launching this task."),(0,i.kt)("p",null,"When depending on tasks defined in the same ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file, you can just specify\nthe task's name prefixed by a colon (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},":compile")," would refer to a task\nnamed ",(0,i.kt)("inlineCode",{parentName:"p"},"compile")," defined in the same file). If you need to depend on a task\ndefined in a different ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file, you must specify the fully qualified task\nidentifier (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"//experiments:benchmark")," would refer to a task named\n",(0,i.kt)("inlineCode",{parentName:"p"},"benchmark")," defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"experiments")," directory)."),(0,i.kt)("h2",{id:"usage-example"},"Usage Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="COND"',title:'"COND"'},'run_command(\n  name="figures",\n  run="python make_figures.py",\n  parallelizable=True,\n  deps=[\n    ":benchmark",\n  ],\n)\n')))}c.isMDXComponent=!0}}]);