"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[695],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,k=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5602:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"Task Types",id:"task-types"},p=void 0,l={unversionedId:"task-types",id:"task-types",title:"Task Types",description:"The subpages in this section describe Conductor's task types in detail. This",source:"@site/docs/task-types.md",sourceDirName:".",slug:"/task-types",permalink:"/conductor/task-types",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types.md",tags:[],version:"current",frontMatter:{title:"Task Types",id:"task-types"},sidebar:"docs",previous:{title:"Overview",permalink:"/conductor/"},next:{title:"run_experiment()",permalink:"/conductor/task-types/run-experiment"}},d=[{value:"Kinds of Task Types",id:"kinds-of-task-types",children:[{value:"Experiment Task Types",id:"experiment-task-types",children:[],level:3},{value:"Non-Experiment Task Types",id:"non-experiment-task-types",children:[],level:3}],level:2},{value:"Task Environment Variables",id:"task-environment-variables",children:[{value:"<code>COND_OUT</code>",id:"cond_out",children:[],level:3},{value:"<code>COND_DEPS</code>",id:"cond_deps",children:[],level:3},{value:"<code>COND_NAME</code>",id:"cond_name",children:[],level:3},{value:"<code>COND_SLOT</code>",id:"cond_slot",children:[],level:3}],level:2}],c={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The subpages in this section describe Conductor's task types in detail. This\npage outlines the common concepts among all task types."),(0,i.kt)("h2",{id:"kinds-of-task-types"},"Kinds of Task Types"),(0,i.kt)("p",null,"At a high level, Conductor has two kinds of task types: experiment task types,\nand non-experiment task types."),(0,i.kt)("h3",{id:"experiment-task-types"},"Experiment Task Types"),(0,i.kt)("p",null,"Experiment task types (",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()"))," and\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment-group"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment_group()")),") are used to\nlaunch scripts or executables that produce results for your research. For\nexample, a benchmark script that you run to collect performance results for your\nproject should be encoded as a ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()")," task."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Special handling."),"\nConductor distinguishes between experiment task types and non-experiment task\ntypes because it does a few extra things for experiment tasks that are typically\nnot needed for non-experiment tasks. For experiment tasks, Conductor will\nautomatically"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Record the arguments and options passed to the task's executable"),(0,i.kt)("li",{parentName:"ul"},"Record the task executable's standard out and standard error streams")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Versioning."),"\nThe outputs of an experiment task (e.g., the collected performance results) are\nalso versioned and ",(0,i.kt)("a",{parentName:"p",href:"/conductor/cli/archive"},"archivable"),". The reference page for\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()"))," provides more details about\nwhat this means."),(0,i.kt)("h3",{id:"non-experiment-task-types"},"Non-Experiment Task Types"),(0,i.kt)("p",null,"All other Conductor task types are non-experiment task types. The semantics of\neach non-experiment task type are described in each task type's reference page."),(0,i.kt)("p",null,"Non-experiment task types are typically used to orchestrate the environment\nsetup and data transformation steps of your research computing pipeline. For\nexample, a script that takes raw experiment results and generates a graph should\nbe encoded as a ",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-command"},(0,i.kt)("inlineCode",{parentName:"a"},"run_command()"))," task."),(0,i.kt)("h2",{id:"task-environment-variables"},"Task Environment Variables"),(0,i.kt)("p",null,"When running a task, Conductor will set a number of environment variables. These\nenvironment variables are used to provide information to the task executable."),(0,i.kt)("h3",{id:"cond_out"},(0,i.kt)("inlineCode",{parentName:"h3"},"COND_OUT")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_OUT")," environment variable is set to an absolute path where the task\nexecutable should write its output file(s). This variable is always set (i.e.,\nit is set for all tasks)."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When orchestrating your computing pipeline with Conductor, it is ",(0,i.kt)("em",{parentName:"p"},"very\nimportant")," to make sure your executables write their outputs to the path given\nby ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_OUT"),". Doing so ensures that any dependent tasks will be able to find\ntheir dependencies' outputs. For experiment tasks, writing your outputs to\n",(0,i.kt)("inlineCode",{parentName:"p"},"COND_OUT")," ensures that your experiment results can be versioned and archived\ncorrectly."))),(0,i.kt)("h3",{id:"cond_deps"},(0,i.kt)("inlineCode",{parentName:"h3"},"COND_DEPS")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_DEPS")," environment variable is set to a string of colon (",(0,i.kt)("inlineCode",{parentName:"p"},":"),") separated\nabsolute paths to the task's dependencies' outputs. If the task has no\ndependencies, this variable will be set to an empty string."),(0,i.kt)("p",null,"The purpose of this environment variable is to enable a task to find the output\nfiles of its dependencies. For example, suppose ",(0,i.kt)("inlineCode",{parentName:"p"},"task-1")," lists ",(0,i.kt)("inlineCode",{parentName:"p"},"task-a")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"task-b")," as its dependencies. Suppose that ",(0,i.kt)("inlineCode",{parentName:"p"},"task-a"),"'s output path is ",(0,i.kt)("inlineCode",{parentName:"p"},"/task-a"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"task-b"),"'s output path is ",(0,i.kt)("inlineCode",{parentName:"p"},"/task-b"),". Then when ",(0,i.kt)("inlineCode",{parentName:"p"},"task-1")," runs, ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_DEPS"),"\nwill be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"/task-a:/task-b"),"."),(0,i.kt)("h3",{id:"cond_name"},(0,i.kt)("inlineCode",{parentName:"h3"},"COND_NAME")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_NAME")," environment variable is set to the task's name. This variable is\nalways set."),(0,i.kt)("h3",{id:"cond_slot"},(0,i.kt)("inlineCode",{parentName:"h3"},"COND_SLOT")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_SLOT")," environment variable is set when the task ",(0,i.kt)("em",{parentName:"p"},"may")," be executing in\nparallel. When set, ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_SLOT")," will have a non-negative integer value that is\nless than the maximum number of parallel tasks allowed (set using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--jobs"),"\nflag, see the reference for ",(0,i.kt)("a",{parentName:"p",href:"/conductor/cli/run"},(0,i.kt)("inlineCode",{parentName:"a"},"cond run")),"). For example, if ",(0,i.kt)("inlineCode",{parentName:"p"},"--jobs"),"\nwas set to 3, ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_SLOT")," will only be either 0, 1, or 2."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"COND_SLOT")," will only be set if the task is parallelizable (specified by setting\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"parallelizable")," argument when defining the task, see\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()")),"). Conductor guarantees that\nall tasks running in parallel will have distinct values of ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_SLOT"),"."),(0,i.kt)("p",null,"One use case for ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_SLOT")," is to ensure tasks executing in parallel are\nscheduled on different CPU cores. For example, a task executable may request to\nbe pinned on a specific core based on the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"COND_SLOT"),"."))}u.isMDXComponent=!0}}]);