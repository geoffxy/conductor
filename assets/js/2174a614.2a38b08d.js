"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[795],{4675:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=s(4848),r=s(8453);const i={title:"run_command()",id:"run-command"},d=void 0,o={id:"task-types/run-command",title:"run_command()",description:"A run_command() task runs the command specified in the run argument. The",source:"@site/docs/task-types/run-command.md",sourceDirName:"task-types",slug:"/task-types/run-command",permalink:"/conductor/task-types/run-command",draft:!1,unlisted:!1,editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/run-command.md",tags:[],version:"current",frontMatter:{title:"run_command()",id:"run-command"},sidebar:"docs",previous:{title:"run_experiment()",permalink:"/conductor/task-types/run-experiment"},next:{title:"combine()",permalink:"/conductor/task-types/combine"}},a={},c=[{value:"Arguments",id:"arguments",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>run</code>",id:"run",level:3},{value:"<code>parallelizable</code>",id:"parallelizable",level:3},{value:"<code>args</code>",id:"args",level:3},{value:"Example",id:"example",level:4},{value:"<code>options</code>",id:"options",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>deps</code>",id:"deps",level:3},{value:"Usage Example",id:"usage-example",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"run_command(name, run, parallelizable=False, args=[], options={}, deps=[])\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"run_command()"})," task runs the command specified in the ",(0,t.jsx)(n.code,{children:"run"})," argument. The\ndifference between this task type and\n",(0,t.jsx)(n.a,{href:"/conductor/task-types/run-experiment",children:(0,t.jsx)(n.code,{children:"run_experiment()"})})," is that the outputs from this\ntask are not versioned (nor are they archivable). A ",(0,t.jsx)(n.code,{children:"run_command()"})," task is\nusually well-suited for orchestrating the environment setup and data\ntransformation steps of your research computing pipeline (e.g., compiling\nexecutables or generating figures from benchmark results)."]}),"\n",(0,t.jsxs)(n.p,{children:["All files that this task produces should be written to the path given in the\n",(0,t.jsx)(n.code,{children:"COND_OUT"})," environment variable. This ensures that other tasks that depend on\nthis task can find this task's produced files."]}),"\n",(0,t.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsx)(n.h3,{id:"name",children:(0,t.jsx)(n.code,{children:"name"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," String (required)"]}),"\n",(0,t.jsxs)(n.p,{children:["The task's name. This name must be unique within the task's ",(0,t.jsx)(n.code,{children:"COND"})," file. A task\nname can only contain letters, numbers, hyphens (",(0,t.jsx)(n.code,{children:"-"}),"), and underscores (",(0,t.jsx)(n.code,{children:"_"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"run",children:(0,t.jsx)(n.code,{children:"run"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," String (required)"]}),"\n",(0,t.jsxs)(n.p,{children:["The command to execute when running this task. This command will be executed\nusing ",(0,t.jsx)(n.code,{children:"bash"}),", with the location of the task's ",(0,t.jsx)(n.code,{children:"COND"})," file as the shell's working\ndirectory. In other words, any relative paths in the command will be interpreted\nas relative to the directory containing the task's ",(0,t.jsx)(n.code,{children:"COND"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["Conductor uses the exit code of the command to determine whether it succeeded or\nfailed. If the command succeeds, it should exit with an exit code of ",(0,t.jsx)(n.code,{children:"0"}),".\nConductor interprets any non-zero exit code as a failure. If a task fails, it\nprevents any other tasks that depend on it from executing (see the reference for\n",(0,t.jsx)(n.a,{href:"/conductor/cli/run",children:(0,t.jsx)(n.code,{children:"cond run"})}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"parallelizable",children:(0,t.jsx)(n.code,{children:"parallelizable"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," Boolean (default: ",(0,t.jsx)(n.code,{children:"False"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["If set to ",(0,t.jsx)(n.code,{children:"True"}),", Conductor may launch this task while other ",(0,t.jsx)(n.code,{children:"parallelizable"}),"\ntasks are running. You should set this argument to ",(0,t.jsx)(n.code,{children:"True"})," if it is okay for this\ntask to execute while other tasks are also running."]}),"\n",(0,t.jsxs)(n.p,{children:["By default, tasks are not ",(0,t.jsx)(n.code,{children:"parallelizable"}),", and so Conductor will not launch a\nnew task until the previously launched task has completed (or failed)."]}),"\n",(0,t.jsx)(n.h3,{id:"args",children:(0,t.jsx)(n.code,{children:"args"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," List of primitive types (default: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["A list of ordered arguments that should be passed to the command string\nspecified in ",(0,t.jsx)(n.code,{children:"run"}),". The arguments will be passed to the command in the order\nthey are listed in ",(0,t.jsx)(n.code,{children:"args"}),". The primitive types supported in ",(0,t.jsx)(n.code,{children:"args"})," are strings,\nBooleans, integers, and floating point numbers."]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'run_command(\n  name="example",\n  run="./run.sh",\n  args=["arg1", "arg2", 123, True, 0.3],\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Conductor will execute the task shown above by running ",(0,t.jsx)(n.code,{children:"./run.sh arg1 arg2 123 true 0.3"})," in ",(0,t.jsx)(n.code,{children:"bash"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"options",children:(0,t.jsx)(n.code,{children:"options"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," Dictionary mapping string keys to primitive values (default: ",(0,t.jsx)(n.code,{children:"{}"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["A map of string keys to primitive values that should be passed to the command\nstring specified in ",(0,t.jsx)(n.code,{children:"run"}),'. Conductor treats these options as command line\n"flags" and will pass them to the ',(0,t.jsx)(n.code,{children:"run"})," command using ",(0,t.jsx)(n.code,{children:"--key=value"})," syntax. Like\n",(0,t.jsx)(n.code,{children:"args"}),", the primitive types supported in ",(0,t.jsx)(n.code,{children:"options"})," are strings, Booleans,\nintegers, and floating point numbers. When ",(0,t.jsx)(n.code,{children:"args"})," and ",(0,t.jsx)(n.code,{children:"options"})," are both\nnon-empty, ",(0,t.jsx)(n.code,{children:"args"})," are always passed first before ",(0,t.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'run_command(\n  name="example",\n  run="./run.sh",\n  args=["arg1"],\n  options={\n    "foo": 3,\n    "bar": True,\n  },\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Conductor will execute the task shown above by running ",(0,t.jsx)(n.code,{children:"./run.sh arg1 --foo=3 --bar=true"})," in ",(0,t.jsx)(n.code,{children:"bash"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"deps",children:(0,t.jsx)(n.code,{children:"deps"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," List of task identifiers (default: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"A list of task identifiers that this task should depend on. Conductor will\nensure that all dependencies execute successfully before launching this task."}),"\n",(0,t.jsxs)(n.p,{children:["When depending on tasks defined in the same ",(0,t.jsx)(n.code,{children:"COND"})," file, you can just specify\nthe task's name prefixed by a colon (e.g., ",(0,t.jsx)(n.code,{children:":compile"})," would refer to a task\nnamed ",(0,t.jsx)(n.code,{children:"compile"})," defined in the same file). If you need to depend on a task\ndefined in a different ",(0,t.jsx)(n.code,{children:"COND"})," file, you must specify the fully qualified task\nidentifier (e.g., ",(0,t.jsx)(n.code,{children:"//experiments:benchmark"})," would refer to a task named\n",(0,t.jsx)(n.code,{children:"benchmark"})," defined in the ",(0,t.jsx)(n.code,{children:"COND"})," file in the ",(0,t.jsx)(n.code,{children:"experiments"})," directory)."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="COND"',children:'run_command(\n  name="figures",\n  run="python make_figures.py",\n  parallelizable=True,\n  deps=[\n    ":benchmark",\n  ],\n)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>o});var t=s(6540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);