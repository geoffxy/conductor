"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[774],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(l,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3219:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={title:"run_experiment()",id:"run-experiment"},l=void 0,p={unversionedId:"task-types/run-experiment",id:"task-types/run-experiment",title:"run_experiment()",description:"A run_experiment() task runs the command specified in the run argument. The",source:"@site/docs/task-types/run-experiment.md",sourceDirName:"task-types",slug:"/task-types/run-experiment",permalink:"/conductor/task-types/run-experiment",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/run-experiment.md",tags:[],version:"current",frontMatter:{title:"run_experiment()",id:"run-experiment"},sidebar:"docs",previous:{title:"Task Types",permalink:"/conductor/task-types"},next:{title:"run_command()",permalink:"/conductor/task-types/run-command"}},d=[{value:"Arguments",id:"arguments",children:[{value:"<code>name</code>",id:"name",children:[],level:3},{value:"<code>run</code>",id:"run",children:[],level:3},{value:"<code>parallelizable</code>",id:"parallelizable",children:[],level:3},{value:"<code>args</code>",id:"args",children:[{value:"Example",id:"example",children:[],level:4}],level:3},{value:"<code>options</code>",id:"options",children:[{value:"Example",id:"example-1",children:[],level:4}],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3}],level:2},{value:"Reserved File Names",id:"reserved-file-names",children:[],level:2},{value:"Versioning and Caching Semantics",id:"versioning-and-caching-semantics",children:[{value:"Projects Using Git",id:"projects-using-git",children:[],level:3},{value:"Projects Without Git",id:"projects-without-git",children:[],level:3}],level:2},{value:"Usage Example",id:"usage-example",children:[],level:2}],u={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"run_experiment(name, run, parallelizable=False, args=[], options={}, deps=[])\n")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()")," task runs the command specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," argument. The\ntask's output files are ",(0,i.kt)("a",{parentName:"p",href:"#versioning-semantics"},"versioned")," and\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/cli/archive"},"archivable"),"."),(0,i.kt)("p",null,"All files that this task produces should be written to the path given in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"COND_OUT")," environment variable. This ensures that (i) your experiment results\ncan be versioned and archived correctly, and (ii) that other tasks that depend\non this task can find this task's produced files."),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("h3",{id:"name"},(0,i.kt)("inlineCode",{parentName:"h3"},"name")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,i.kt)("p",null,"The task's name. This name must be unique within the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file. A task\nname can only contain letters, numbers, hyphens (",(0,i.kt)("inlineCode",{parentName:"p"},"-"),"), and underscores (",(0,i.kt)("inlineCode",{parentName:"p"},"_"),")."),(0,i.kt)("h3",{id:"run"},(0,i.kt)("inlineCode",{parentName:"h3"},"run")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,i.kt)("p",null,"The command to execute when running this task. This command will be executed\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"bash"),", with the location of the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file as the shell's working\ndirectory. In other words, any relative paths in the command will be interpreted\nas relative to the directory containing the task's ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file."),(0,i.kt)("p",null,"Conductor uses the exit code of the command to determine whether it succeeded or\nfailed. If the command succeeds, it should exit with an exit code of ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),".\nConductor interprets any non-zero exit code as a failure. If a task fails, it\nprevents any other tasks that depend on it from executing (see the reference for\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/cli/run"},(0,i.kt)("inlineCode",{parentName:"a"},"cond run")),")."),(0,i.kt)("h3",{id:"parallelizable"},(0,i.kt)("inlineCode",{parentName:"h3"},"parallelizable")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," Boolean (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"False"),")"),(0,i.kt)("p",null,"If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"True"),", Conductor may launch this task while other ",(0,i.kt)("inlineCode",{parentName:"p"},"parallelizable"),"\ntasks are running. You should set this argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," if it is okay for this\ntask to execute while other tasks are also running."),(0,i.kt)("p",null,"By default, tasks are not ",(0,i.kt)("inlineCode",{parentName:"p"},"parallelizable"),", and so Conductor will not launch a\nnew task until the previously launched task has completed (or failed)."),(0,i.kt)("h3",{id:"args"},(0,i.kt)("inlineCode",{parentName:"h3"},"args")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," List of primitive types (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,i.kt)("p",null,"A list of ordered arguments that should be passed to the command string\nspecified in ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),". The arguments will be passed to the command in the order\nthey are listed in ",(0,i.kt)("inlineCode",{parentName:"p"},"args"),". The primitive types supported in ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," are strings,\nBooleans, integers, and floating point numbers."),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'run_experiment(\n  name="example",\n  run="./run.sh",\n  args=["arg1", "arg2", 123, True, 0.3],\n)\n')),(0,i.kt)("p",null,"Conductor will execute the task shown above by running ",(0,i.kt)("inlineCode",{parentName:"p"},"./run.sh arg1 arg2 123\ntrue 0.3")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"bash"),"."),(0,i.kt)("h3",{id:"options"},(0,i.kt)("inlineCode",{parentName:"h3"},"options")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," Dictionary mapping string keys to primitive values (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),")"),(0,i.kt)("p",null,"A map of string keys to primitive values that should be passed to the command\nstring specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),'. Conductor treats these options as command line\n"flags" and will pass them to the ',(0,i.kt)("inlineCode",{parentName:"p"},"run")," command using ",(0,i.kt)("inlineCode",{parentName:"p"},"--key=value")," syntax. Like\n",(0,i.kt)("inlineCode",{parentName:"p"},"args"),", the primitive types supported in ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," are strings, Booleans,\nintegers, and floating point numbers. When ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," are both\nnon-empty, ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," are always passed first before ",(0,i.kt)("inlineCode",{parentName:"p"},"options"),"."),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'run_experiment(\n  name="example",\n  run="./run.sh",\n  args=["arg1"],\n  options={\n    "foo": 3,\n    "bar": True,\n  },\n)\n')),(0,i.kt)("p",null,"Conductor will execute the task shown above by running ",(0,i.kt)("inlineCode",{parentName:"p"},"./run.sh arg1 --foo=3\n--bar=true")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"bash"),"."),(0,i.kt)("h3",{id:"deps"},(0,i.kt)("inlineCode",{parentName:"h3"},"deps")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," List of task identifiers (default: ",(0,i.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,i.kt)("p",null,"A list of task identifiers that this task should depend on. Conductor will\nensure that all dependencies execute successfully before launching this task."),(0,i.kt)("p",null,"When depending on tasks defined in the same ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file, you can just specify\nthe task's name prefixed by a colon (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},":compile")," would refer to a task\nnamed ",(0,i.kt)("inlineCode",{parentName:"p"},"compile")," defined in the same file). If you need to depend on a task\ndefined in a different ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file, you must specify the fully qualified task\nidentifier (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"//experiments:benchmark")," would refer to a task named\n",(0,i.kt)("inlineCode",{parentName:"p"},"benchmark")," defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"COND")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"experiments")," directory)."),(0,i.kt)("h2",{id:"reserved-file-names"},"Reserved File Names"),(0,i.kt)("p",null,"Conductor records additional metadata about ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()")," tasks in special\nfiles under the path given by ",(0,i.kt)("inlineCode",{parentName:"p"},"$COND_OUT"),". Your executable should not produce\nfiles with the same names because they will be overwritten."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"File Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"args.json")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The arguments passed to the ",(0,i.kt)("inlineCode",{parentName:"td"},"run")," command using ",(0,i.kt)("inlineCode",{parentName:"td"},"args"),", serialized to JSON.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"options.json")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The options passed to the ",(0,i.kt)("inlineCode",{parentName:"td"},"run")," command using ",(0,i.kt)("inlineCode",{parentName:"td"},"options"),", serialized to JSON.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"stderr.log")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A log of the ",(0,i.kt)("inlineCode",{parentName:"td"},"run")," command's output to standard error.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"stdout.log")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A log of the ",(0,i.kt)("inlineCode",{parentName:"td"},"run")," command's output to standard out.")))),(0,i.kt)("h2",{id:"versioning-and-caching-semantics"},"Versioning and Caching Semantics"),(0,i.kt)("p",null,"Conductor versions ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()")," tasks' outputs. When running a\n",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()"),' task, Conductor will check to see if a previous compatible\noutput version exists. If so, it will use the cached results of the "most\ncompatible" version instead of running the task again (unless otherwise\nspecified, see ',(0,i.kt)("a",{parentName:"p",href:"/conductor/cli/run"},(0,i.kt)("inlineCode",{parentName:"a"},"cond run")),'). This section describes the semantics\nof output version "compatibility."'),(0,i.kt)("h3",{id:"projects-using-git"},"Projects Using Git"),(0,i.kt)("p",null,"Whenever a ",(0,i.kt)("inlineCode",{parentName:"p"},"run_experiment()")," task executes, Conductor records the repository's\ncurrent commit hash and associates it with the outputs. Conductor then\ndetermines a task output's compatibility based on the task output's commit hash\nand the repository's current commit (i.e., the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),")."),(0,i.kt)("p",null,"The most compatible version is the version whose commit is both (i) an ancestor\nof the current commit (i.e., an ancestor of ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),'), and (ii) "closest" to the\ncurrent commit. Conductor defines closeness as the number of commits separating\nthe repository\'s current commit (',(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),') and the task version\'s commit. If there\nare multiple closest task versions, Conductor selects the most recent one as\ndetermined by execution timestamp. If there are no "compatible" outputs,\nConductor will execute the task.'),(0,i.kt)("h3",{id:"projects-without-git"},"Projects Without Git"),(0,i.kt)("p",null,"If your project is not managed using Git (or has Conductor's Git integration\nexplicitly disabled), Conductor will always select the most ",(0,i.kt)("em",{parentName:"p"},"recent")," version of\nthe task's outputs. Recency is determined by when the task was executed (i.e., a\ntimestamp). If there are no outputs available, Conductor will execute the task."),(0,i.kt)("h2",{id:"usage-example"},"Usage Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="COND"',title:'"COND"'},'run_experiment(\n  name="benchmark",\n  run="./run_benchmark.sh",\n  parallelizable=False,\n  args=["my_dataset.csv"],\n  options={\n    "threads": 3,\n  },\n  deps=[\n    ":compile",\n  ],\n)\n')))}m.isMDXComponent=!0}}]);