"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[392],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8354:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Archive",id:"archive"},c=void 0,u={unversionedId:"cli/archive",id:"cli/archive",title:"Archive",description:"Conductor's archive functionality provides a convenient way to back up the task",source:"@site/docs/cli/archive.md",sourceDirName:"cli",slug:"/cli/archive",permalink:"/conductor/cli/archive",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/cli/archive.md",tags:[],version:"current",frontMatter:{title:"Archive",id:"archive"},sidebar:"docs",previous:{title:"Run",permalink:"/conductor/cli/run"},next:{title:"Restore",permalink:"/conductor/cli/restore"}},s=[{value:"Positional Arguments",id:"positional-arguments",children:[{value:"<code>task_identifier</code>",id:"task_identifier",children:[],level:3}],level:2},{value:"Optional Arguments",id:"optional-arguments",children:[{value:"<code>-o</code> or <code>--output</code>",id:"-o-or---output",children:[],level:3},{value:"<code>-l</code> or <code>--latest</code>",id:"-l-or---latest",children:[],level:3},{value:"<code>-h</code> or <code>--help</code>",id:"-h-or---help",children:[],level:3}],level:2},{value:"Usage Examples",id:"usage-examples",children:[],level:2}],p={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cond archive [-h] [-o OUTPUT] [-l] [task_identifier]\n")),(0,o.kt)("p",null,'Conductor\'s archive functionality provides a convenient way to back up the task\noutputs of "archivable" tasks\n(',(0,o.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,o.kt)("inlineCode",{parentName:"a"},"run_experiment()"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment-group"},(0,o.kt)("inlineCode",{parentName:"a"},"run_experiment_group()")),"). Conductor\npackages task outputs into a single ",(0,o.kt)("inlineCode",{parentName:"p"},".tar.gz")," file, which can then be backed up\nor transferred. The ",(0,o.kt)("inlineCode",{parentName:"p"},"cond archive")," command helps you create these archive files.\nConductor also provides a way to restore the task outputs in an archive through\n",(0,o.kt)("a",{parentName:"p",href:"/conductor/cli/restore"},(0,o.kt)("inlineCode",{parentName:"a"},"cond restore")),"."),(0,o.kt)("h2",{id:"positional-arguments"},"Positional Arguments"),(0,o.kt)("h3",{id:"task_identifier"},(0,o.kt)("inlineCode",{parentName:"h3"},"task_identifier")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Type:")," String (optional)"),(0,o.kt)("p",null,"The task identifier of the task you want to archive. By design, Conductor only\narchives experiment-based tasks (",(0,o.kt)("inlineCode",{parentName:"p"},"run_experiment()")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"run_experiment_group()"),"). Thus, during the archive process, Conductor will only\narchive the experiment-based tasks in the transitive closure of\n",(0,o.kt)("inlineCode",{parentName:"p"},"task_identifier")," (i.e., only its dependencies which are experiments). The idea\nis that you should be able to regenerate all other task outputs as long as you\nhave the original experiment results."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"task_identifier")," argument is optional. If you do not specify a task,\nConductor will archive ",(0,o.kt)("em",{parentName:"p"},"all")," archivable task outputs."),(0,o.kt)("h2",{id:"optional-arguments"},"Optional Arguments"),(0,o.kt)("h3",{id:"-o-or---output"},(0,o.kt)("inlineCode",{parentName:"h3"},"-o")," or ",(0,o.kt)("inlineCode",{parentName:"h3"},"--output")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Usage:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"-o OUTPUT")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"--output OUTPUT")),(0,o.kt)("p",null,"The path (and optionally file name) where the output archive should be saved.\nThe path must exist. This argument is optional. If unspecified, Conductor will\nsave the archive in its output directory (",(0,o.kt)("inlineCode",{parentName:"p"},"cond-out"),")."),(0,o.kt)("h3",{id:"-l-or---latest"},(0,o.kt)("inlineCode",{parentName:"h3"},"-l")," or ",(0,o.kt)("inlineCode",{parentName:"h3"},"--latest")),(0,o.kt)("p",null,"If set, Conductor will only archive the latest (most recent) output version of\nthe requested tasks. By default, Conductor will archive all output versions of\nthe archivable tasks."),(0,o.kt)("h3",{id:"-h-or---help"},(0,o.kt)("inlineCode",{parentName:"h3"},"-h")," or ",(0,o.kt)("inlineCode",{parentName:"h3"},"--help")),(0,o.kt)("p",null,"Prints a help message that provides details about how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"cond archive"),"\nsubcommand."),(0,o.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Create an archive of all existing archivable task outputs.\n$ cond archive\n\n# Archive all experiment task outputs of //experiments:run_benchmark and its\n# dependencies.\n$ cond archive //experiments:run_benchmark\n\n# Create an archive of only the latest versions of each archivable task output.\n$ cond archive --latest\n\n# Create an archive of all existing archivable task outputs and save it as\n# "my_archive.tar.gz".\n$ cond archive --output my_archive.tar.gz\n')))}d.isMDXComponent=!0}}]);