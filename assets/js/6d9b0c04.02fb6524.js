"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[512],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return t?i.createElement(f,o(o({ref:n},l),{},{components:t})):i.createElement(f,o({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5192:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var i=t(7462),a=t(3366),r=(t(7294),t(3905)),o=["components"],s={title:"combine()",id:"combine"},p=void 0,c={unversionedId:"task-types/combine",id:"task-types/combine",title:"combine()",description:"A combine() task copies the output files of its dependencies into a single",source:"@site/docs/task-types/combine.md",sourceDirName:"task-types",slug:"/task-types/combine",permalink:"/conductor/task-types/combine",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/combine.md",tags:[],version:"current",frontMatter:{title:"combine()",id:"combine"},sidebar:"docs",previous:{title:"run_command()",permalink:"/conductor/task-types/run-command"},next:{title:"group()",permalink:"/conductor/task-types/group"}},l=[{value:"Arguments",id:"arguments",children:[{value:"<code>name</code>",id:"name",children:[],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3}],level:2},{value:"Usage Example",id:"usage-example",children:[],level:2}],d={toc:l};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"combine(name, deps=[])\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"combine()")," task copies the output files of its dependencies into a single\ndirectory (the ",(0,r.kt)("inlineCode",{parentName:"p"},"combine()")," task's output directory). The task's output directory\nwill contain one subdirectory for each of its dependencies, each containing the\ndependency's output files."),(0,r.kt)("p",null,'A common use case for this task is to "combine" the outputs of multiple related\ntasks. For example, if you use different scripts to generate a collection of\nfigures, you can use a ',(0,r.kt)("inlineCode",{parentName:"p"},"combine()")," task to copy the generated figures into a\nsingle directory."),(0,r.kt)("h2",{id:"arguments"},"Arguments"),(0,r.kt)("h3",{id:"name"},(0,r.kt)("inlineCode",{parentName:"h3"},"name")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,r.kt)("p",null,"The task's name. This name must be unique within the task's ",(0,r.kt)("inlineCode",{parentName:"p"},"COND")," file. A task\nname can only contain letters, numbers, hyphens (",(0,r.kt)("inlineCode",{parentName:"p"},"-"),"), and underscores (",(0,r.kt)("inlineCode",{parentName:"p"},"_"),")."),(0,r.kt)("h3",{id:"deps"},(0,r.kt)("inlineCode",{parentName:"h3"},"deps")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type:")," List of task identifiers (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,r.kt)("p",null,"A list of task identifiers that this task should depend on. Conductor will\nensure that all dependencies execute successfully before launching this task."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The dependencies listed in a ",(0,r.kt)("inlineCode",{parentName:"p"},"combine()")," task must have unique ",(0,r.kt)("em",{parentName:"p"},"names"),". This is\nbecause a ",(0,r.kt)("inlineCode",{parentName:"p"},"combine()")," task creates a subdirectory for each dependency using the\ndependency's name."),(0,r.kt)("p",{parentName:"div"},"For example, the task identifiers ",(0,r.kt)("inlineCode",{parentName:"p"},"//foo:build")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"//bar:build")," are distinct,\nbut they share the same name and thus cannot both be listed as a dependency in a\n",(0,r.kt)("inlineCode",{parentName:"p"},"combine()")," task."))),(0,r.kt)("p",null,"When depending on tasks defined in the same ",(0,r.kt)("inlineCode",{parentName:"p"},"COND")," file, you can just specify\nthe task's name prefixed by a colon (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},":compile")," would refer to a task\nnamed ",(0,r.kt)("inlineCode",{parentName:"p"},"compile")," defined in the same file). If you need to depend on a task\ndefined in a different ",(0,r.kt)("inlineCode",{parentName:"p"},"COND")," file, you must specify the fully qualified task\nidentifier (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"//experiments:benchmark")," would refer to a task named\n",(0,r.kt)("inlineCode",{parentName:"p"},"benchmark")," defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"COND")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments")," directory)."),(0,r.kt)("h2",{id:"usage-example"},"Usage Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="COND"',title:'"COND"'},'combine(\n  name="make_figures",\n  deps=[\n    ":make_figure1",\n    ":make_figure2",\n  ],\n)\n')),(0,r.kt)("p",null,"This task's output directory will contain two subdirectories: ",(0,r.kt)("inlineCode",{parentName:"p"},"make_figure1")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"make_figure2"),". The subdirectories will contain the outputs from the\n",(0,r.kt)("inlineCode",{parentName:"p"},":make_figure1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},":make_figure2")," tasks respectively."))}u.isMDXComponent=!0}}]);