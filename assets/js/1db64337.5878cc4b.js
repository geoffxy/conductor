"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[372],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4407:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={title:"Overview",slug:"/"},l=void 0,u={unversionedId:"overview",id:"overview",title:"Overview",description:"Conductor is a simple and elegant tool that helps orchestrate your research",source:"@site/docs/overview.md",sourceDirName:".",slug:"/",permalink:"/conductor/",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/overview.md",tags:[],version:"current",frontMatter:{title:"Overview",slug:"/"},sidebar:"docs",next:{title:"Task Types",permalink:"/conductor/task-types"}},p=[{value:"Installing",id:"installing",children:[],level:2},{value:"Getting Started",id:"getting-started",children:[{value:"Project Root",id:"project-root",children:[],level:3},{value:"Tasks",id:"tasks",children:[{value:"Task Identifiers",id:"task-identifiers",children:[],level:4},{value:"Dependencies",id:"dependencies",children:[],level:4},{value:"Task Outputs",id:"task-outputs",children:[],level:4}],level:3}],level:2}],c={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Conductor is a simple and elegant tool that helps orchestrate your research\ncomputing. Conductor automates your research computing pipeline, all the way\nfrom experiments to figures in your paper."),(0,a.kt)("h2",{id:"installing"},"Installing"),(0,a.kt)("p",null,"Conductor requires Python 3.8+ and is currently only supported on macOS and\nLinux machines. It has been tested on macOS 10.14 and Ubuntu 20.04."),(0,a.kt)("p",null,"Conductor is ",(0,a.kt)("a",{parentName:"p",href:"https://pypi.org/project/conductor-cli/"},"available on PyPI")," and so\nit can be installed using ",(0,a.kt)("inlineCode",{parentName:"p"},"pip"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install conductor-cli\n")),(0,a.kt)("p",null,"After installation, the ",(0,a.kt)("inlineCode",{parentName:"p"},"cond")," executable should be available in your shell."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cond --help\n")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"A quick way to get started is to look at Conductor's ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/geoffxy/conductor/tree/master/examples"},"example\nprojects"),". Below is a\nquick overview of a few important Conductor concepts."),(0,a.kt)("h3",{id:"project-root"},"Project Root"),(0,a.kt)("p",null,"When using Conductor with your project, you first need to add a\n",(0,a.kt)("inlineCode",{parentName:"p"},"cond_config.toml")," file to your project's root directory. This file tells\nConductor where your project files are located and is important because all\ntask identifiers (defined below) are relative to your project root."),(0,a.kt)("h3",{id:"tasks"},"Tasks"),(0,a.kt)("p",null,'Conductor works with "tasks", which are jobs (arbitrary shell commands or\nscripts) that it should run. You define tasks in ',(0,a.kt)("inlineCode",{parentName:"p"},"COND"),' files using Python\nsyntax. All tasks are of a predefined "type" (e.g., ',(0,a.kt)("inlineCode",{parentName:"p"},"run_experiment()"),"), which\nare listed in the ",(0,a.kt)("a",{parentName:"p",href:"task-types"},"task types reference documentation"),"."),(0,a.kt)("p",null,"Conductor's tasks are very similar to (and inspired by)\n",(0,a.kt)("a",{parentName:"p",href:"https://bazel.build"},"Bazel's")," and ",(0,a.kt)("a",{parentName:"p",href:"https://buck.build"},"Buck's")," build rules."),(0,a.kt)("h4",{id:"task-identifiers"},"Task Identifiers"),(0,a.kt)("p",null,"A task is identified using the path to the ",(0,a.kt)("inlineCode",{parentName:"p"},"COND")," file where it is defined\n(relative to your project's root directory), followed by its name. For example,\na task named ",(0,a.kt)("inlineCode",{parentName:"p"},"run_benchmark")," defined in a ",(0,a.kt)("inlineCode",{parentName:"p"},"COND")," file located in\n",(0,a.kt)("inlineCode",{parentName:"p"},"experiments/COND")," would have the task identifier ",(0,a.kt)("inlineCode",{parentName:"p"},"//experiments:run_benchmark"),".\nTo have Conductor run the task, you run ",(0,a.kt)("inlineCode",{parentName:"p"},"cond run\n//experiments:run_benchmark")," in your shell."),(0,a.kt)("h4",{id:"dependencies"},"Dependencies"),(0,a.kt)("p",null,"Tasks can be dependent on other tasks. To specify a dependency, you use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"deps")," keyword argument when defining a task.  When running a task that has\ndependencies, Conductor will ensure that all of its dependencies are executed\nfirst before the task is executed. This allows you to build a dependency graph\nof tasks, which can be used to automate your entire research computing pipeline."),(0,a.kt)("h4",{id:"task-outputs"},"Task Outputs"),(0,a.kt)("p",null,"Tasks usually (but not always) will need to produce output file(s) (e.g.,\nmeasurements, figures). When Conductor runs a task, it will set the\n",(0,a.kt)("inlineCode",{parentName:"p"},"COND_OUT")," environment variable to a path where the task should write its\noutputs. See the example projects for an example of how this is used. All\ntask outputs will be stored under the ",(0,a.kt)("inlineCode",{parentName:"p"},"cond-out")," directory."),(0,a.kt)("p",null,"Similarly, Conductor will also set the ",(0,a.kt)("inlineCode",{parentName:"p"},"COND_DEPS")," environment variable to a\ncolon (",(0,a.kt)("inlineCode",{parentName:"p"},":"),") separated list of paths to the task's dependencies' outputs. If\nthe task has no dependencies, the ",(0,a.kt)("inlineCode",{parentName:"p"},"COND_DEPS")," environment variable will be\nset to an empty string."),(0,a.kt)("p",null,"It's ",(0,a.kt)("em",{parentName:"p"},"important")," to write task outputs to the path specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"COND_OUT"),".\nThis ensures other tasks can find the current task's outputs, and also allows\nConductor to archive your tasks' outputs."))}d.isMDXComponent=!0}}]);