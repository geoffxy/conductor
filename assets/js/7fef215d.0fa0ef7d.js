"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[579],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9485:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"Run",id:"run"},s=void 0,c={unversionedId:"cli/run",id:"cli/run",title:"Run",description:"Runs the task identified by task_identifier, along with its dependencies.",source:"@site/docs/cli/run.md",sourceDirName:"cli",slug:"/cli/run",permalink:"/conductor/cli/run",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/cli/run.md",tags:[],version:"current",frontMatter:{title:"Run",id:"run"},sidebar:"docs",previous:{title:"Command Line Interface",permalink:"/conductor/cli"},next:{title:"Archive",permalink:"/conductor/cli/archive"}},u=[{value:"Positional Arguments",id:"positional-arguments",children:[{value:"<code>task_identifier</code>",id:"task_identifier",children:[],level:3}],level:2},{value:"Optional Arguments",id:"optional-arguments",children:[{value:"<code>-a</code> or <code>--again</code>",id:"-a-or---again",children:[],level:3},{value:"<code>-e</code> or <code>--stop-early</code>",id:"-e-or---stop-early",children:[],level:3},{value:"<code>-j</code> or <code>--jobs</code>",id:"-j-or---jobs",children:[],level:3},{value:"<code>-h</code> or <code>--help</code>",id:"-h-or---help",children:[],level:3}],level:2},{value:"Usage Examples",id:"usage-examples",children:[],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ cond run [-h] [-a] [-e] [-j [JOBS]] task_identifier\n")),(0,i.kt)("p",null,"Runs the task identified by ",(0,i.kt)("inlineCode",{parentName:"p"},"task_identifier"),", along with its dependencies.\nConductor will ensure that all dependencies (and their dependencies, and so on)\ncomplete successfully before launching the task itself."),(0,i.kt)("p",null,"If any tasks in ",(0,i.kt)("inlineCode",{parentName:"p"},"task_identifier"),"'s transitive closure fail, Conductor will\nstill attempt to run as many of the remaining tasks as possible. Any tasks that\ncannot run because one of their dependencies failed is skipped. Conductor will\nreport which tasks failed and which were skipped."),(0,i.kt)("h2",{id:"positional-arguments"},"Positional Arguments"),(0,i.kt)("h3",{id:"task_identifier"},(0,i.kt)("inlineCode",{parentName:"h3"},"task_identifier")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,i.kt)("p",null,"The task identifier of the task that you want to run."),(0,i.kt)("h2",{id:"optional-arguments"},"Optional Arguments"),(0,i.kt)("h3",{id:"-a-or---again"},(0,i.kt)("inlineCode",{parentName:"h3"},"-a")," or ",(0,i.kt)("inlineCode",{parentName:"h3"},"--again")),(0,i.kt)("p",null,"By default, Conductor will use cached results for certain tasks if they exist\n(see the reference for ",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()")),").\nSetting this flag will make Conductor run all the relevant tasks again,\nregardless of the cache."),(0,i.kt)("h3",{id:"-e-or---stop-early"},(0,i.kt)("inlineCode",{parentName:"h3"},"-e")," or ",(0,i.kt)("inlineCode",{parentName:"h3"},"--stop-early")),(0,i.kt)("p",null,"If set, Conductor will immediately stop executing a task if any dependent task\nfails. By default, if a dependent task fails, Conductor will still try to\nexecute the rest of the task's dependencies that do not depend on the failed\ntask."),(0,i.kt)("h3",{id:"-j-or---jobs"},(0,i.kt)("inlineCode",{parentName:"h3"},"-j")," or ",(0,i.kt)("inlineCode",{parentName:"h3"},"--jobs")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Usage:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"-j [JOBS]")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--jobs [JOBS]")),(0,i.kt)("p",null,"The maximum number of tasks that Conductor can run in parallel. If this flag is\n",(0,i.kt)("em",{parentName:"p"},"not")," used, Conductor will always execute tasks sequentially. When this flag\n",(0,i.kt)("em",{parentName:"p"},"is")," used, Conductor may execute up to ",(0,i.kt)("inlineCode",{parentName:"p"},"JOBS")," tasks in parallel. Conductor will\nonly execute ",(0,i.kt)("inlineCode",{parentName:"p"},"parallelizable")," tasks in parallel (see the reference for\n",(0,i.kt)("a",{parentName:"p",href:"/conductor/task-types/run-experiment"},(0,i.kt)("inlineCode",{parentName:"a"},"run_experiment()")),")."),(0,i.kt)("p",null,"If this flag is used without specifying a value, Conductor will set ",(0,i.kt)("inlineCode",{parentName:"p"},"JOBS")," to be\nthe number of virtual CPUs detected in the machine. This flag behaves\nanalogously to the ",(0,i.kt)("inlineCode",{parentName:"p"},"-j")," flag in ",(0,i.kt)("inlineCode",{parentName:"p"},"make"),"."),(0,i.kt)("h3",{id:"-h-or---help"},(0,i.kt)("inlineCode",{parentName:"h3"},"-h")," or ",(0,i.kt)("inlineCode",{parentName:"h3"},"--help")),(0,i.kt)("p",null,"Prints a help message that provides details about how to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"cond run"),"\nsubcommand."),(0,i.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Run //experiments:benchmark.\n$ cond run --again //experiments:benchmark\n\n# Run //experiments:benchmark, regardless if it has cached results available.\n$ cond run --again //experiments:benchmark\n\n# Run //experiments:benchmark, stopping as soon as any dependent task fails.\n$ cond run --stop-early //experiments:benchmark\n\n# Run //experiments:benchmark, allowing at most 3 tasks to run in parallel at\n# any time.\n$ cond run -j 3 //experiments:benchmark\n")))}p.isMDXComponent=!0}}]);