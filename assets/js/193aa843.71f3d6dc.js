"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[725],{1137:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=s(4848),r=s(8453);const i={title:"run_experiment_group()",id:"run-experiment-group"},d=void 0,c={id:"task-types/run-experiment-group",title:"run_experiment_group()",description:"A runexperimentgroup() task lets you specify a list of experiments that",source:"@site/docs/task-types/run-experiment-group.md",sourceDirName:"task-types",slug:"/task-types/run-experiment-group",permalink:"/conductor/task-types/run-experiment-group",draft:!1,unlisted:!1,editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/run-experiment-group.md",tags:[],version:"current",frontMatter:{title:"run_experiment_group()",id:"run-experiment-group"},sidebar:"docs",previous:{title:"group()",permalink:"/conductor/task-types/group"},next:{title:"Directives",permalink:"/conductor/directives"}},o={},a=[{value:"Arguments",id:"arguments",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>run</code>",id:"run",level:3},{value:"<code>experiments</code>",id:"experiments",level:3},{value:"<code>chain_experiments</code>",id:"chain_experiments",level:3},{value:"<code>deps</code>",id:"deps",level:3},{value:"Usage Example",id:"usage-example",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"run_experiment_group(name, run, experiments=[], chain_experiments=False, deps=[])\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"run_experiment_group()"})," task lets you specify a list of experiments that\nshare the same ",(0,t.jsx)(n.code,{children:"run"})," command and dependencies. In other words, a\n",(0,t.jsx)(n.code,{children:"run_experiment_group()"})," task is a concise way of defining a list of\n",(0,t.jsx)(n.a,{href:"/conductor/task-types/run-experiment",children:(0,t.jsx)(n.code,{children:"run_experiment()"})})," tasks that all have the same\n",(0,t.jsx)(n.code,{children:"run"})," command and ",(0,t.jsx)(n.code,{children:"deps"})," but differ in their ",(0,t.jsx)(n.code,{children:"args"})," and ",(0,t.jsx)(n.code,{children:"options"}),". The\nindividual experiments are all versioned and archivable, just as if they were\n",(0,t.jsx)(n.code,{children:"run_experiment()"})," tasks. After the experiments execute successfully, their\noutputs are copied into a single output directory (using the same semantics as\n",(0,t.jsx)(n.a,{href:"/conductor/task-types/combine",children:(0,t.jsx)(n.code,{children:"combine()"})}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"run_experiment_group()"})," task type is actually just syntactic sugar.\nConductor implements this task type by transforming its experiments list into\n",(0,t.jsx)(n.code,{children:"run_experiment()"})," tasks and a single ",(0,t.jsx)(n.code,{children:"combine()"})," task (see the ",(0,t.jsx)(n.a,{href:"#usage-example",children:"usage\nexample"}),")."]}),"\n",(0,t.jsx)(n.p,{children:'A common use case for this task type is running experiments where you need to\n"sweep" over one or more parameters.'}),"\n",(0,t.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsx)(n.h3,{id:"name",children:(0,t.jsx)(n.code,{children:"name"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," String (required)"]}),"\n",(0,t.jsxs)(n.p,{children:["The task's name. This name must be unique within the task's ",(0,t.jsx)(n.code,{children:"COND"})," file. A task\nname can only contain letters, numbers, hyphens (",(0,t.jsx)(n.code,{children:"-"}),"), and underscores (",(0,t.jsx)(n.code,{children:"_"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"run",children:(0,t.jsx)(n.code,{children:"run"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," String (required)"]}),"\n",(0,t.jsxs)(n.p,{children:["The command to execute when running the experiments in this task. This command\nwill be executed using ",(0,t.jsx)(n.code,{children:"bash"}),", with the location of the task's ",(0,t.jsx)(n.code,{children:"COND"})," file as\nthe shell's working directory. In other words, any relative paths in the command\nwill be interpreted as relative to the directory containing the task's ",(0,t.jsx)(n.code,{children:"COND"}),"\nfile."]}),"\n",(0,t.jsxs)(n.p,{children:["Conductor uses the exit code of the command to determine whether it succeeded or\nfailed. If the command succeeds, it should exit with an exit code of ",(0,t.jsx)(n.code,{children:"0"}),".\nConductor interprets any non-zero exit code as a failure. If a task fails, it\nprevents any other tasks that depend on it from executing (see the reference for\n",(0,t.jsx)(n.a,{href:"/conductor/cli/run",children:(0,t.jsx)(n.code,{children:"cond run"})}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"experiments",children:(0,t.jsx)(n.code,{children:"experiments"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," List of ",(0,t.jsx)(n.code,{children:"ExperimentInstance"}),"s (default: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"ExperimentInstance(name, args=[], options={}, parallelizable=False)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The arguments that ",(0,t.jsx)(n.code,{children:"ExperimentInstance()"})," takes have the same semantics as the\narguments listed in the ",(0,t.jsxs)(n.a,{href:"/conductor/task-types/run-experiment",children:[(0,t.jsx)(n.code,{children:"run_experiment()"})," reference"]}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"name"})," used for each ",(0,t.jsx)(n.code,{children:"ExperimentInstance"})," must be unique in the ",(0,t.jsx)(n.code,{children:"COND"})," file.\nEach ",(0,t.jsx)(n.code,{children:"ExperimentInstance"})," ",(0,t.jsx)(n.code,{children:"name"})," must also be different from the ",(0,t.jsx)(n.code,{children:"name"})," used for\nthe experiment's enclosing ",(0,t.jsx)(n.code,{children:"run_experiment_group()"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"chain_experiments",children:(0,t.jsx)(n.code,{children:"chain_experiments"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," Boolean (optional)"]}),"\n",(0,t.jsxs)(n.p,{children:["If set to ",(0,t.jsx)(n.code,{children:"True"}),", Conductor will add dependency constraints between the\nexperiment instances listed in ",(0,t.jsx)(n.code,{children:"experiments"}),'. Conductor adds the dependencies in\nthe order the experiment instances are defined, creating a "dependency chain."\nSee the usage example at the bottom of this page for an example of what this\nargument does.']}),"\n",(0,t.jsxs)(n.p,{children:["This argument is useful when you want to run different experiment ",(0,t.jsx)(n.em,{children:"groups"}),"\nconcurrently, but do not want the experiments within one group to run\nconcurrently."]}),"\n",(0,t.jsx)(n.h3,{id:"deps",children:(0,t.jsx)(n.code,{children:"deps"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type:"})," List of task identifiers (default: ",(0,t.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"A list of task identifiers that all experiments in this task should depend on.\nConductor will ensure that all dependencies execute successfully before\nlaunching this task."}),"\n",(0,t.jsxs)(n.p,{children:["When depending on tasks defined in the same ",(0,t.jsx)(n.code,{children:"COND"})," file, you can just specify\nthe task's name prefixed by a colon (e.g., ",(0,t.jsx)(n.code,{children:":compile"})," would refer to a task\nnamed ",(0,t.jsx)(n.code,{children:"compile"})," defined in the same file). If you need to depend on a task\ndefined in a different ",(0,t.jsx)(n.code,{children:"COND"})," file, you must specify the fully qualified task\nidentifier (e.g., ",(0,t.jsx)(n.code,{children:"//experiments:benchmark"})," would refer to a task named\n",(0,t.jsx)(n.code,{children:"benchmark"})," defined in the ",(0,t.jsx)(n.code,{children:"COND"})," file in the ",(0,t.jsx)(n.code,{children:"experiments"})," directory)."]}),"\n",(0,t.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we define a ",(0,t.jsx)(n.code,{children:"run_experiment_group()"})," task that runs\n",(0,t.jsx)(n.code,{children:"./run_benchmark.sh"})," with ",(0,t.jsx)(n.code,{children:"--threads"})," set to 1 and 2. Since ",(0,t.jsx)(n.code,{children:"COND"})," files are\ninterpreted as Python code, you can use Python's language features to help you\ndefine your tasks."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="COND"',children:'run_experiment_group(\n  name="sweep",\n  run="./run_benchmark.sh",\n  experiments=[\n    ExperimentInstance(\n      name="sweep-{}".format(threads),\n      options={\n        "threads": threads,\n      },\n      parallelizable=False,\n    )\n    # COND files are interpreted as Python code. So, you can use list\n    # comprehension when defining your experiments.\n    for threads in range(1, 3)\n  ],\n  chain_experiments=True,\n  deps=[\n    ":compile",\n  ],\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"Internally, Conductor translates the above task definition into"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'run_experiment(\n  name="sweep-1",\n  run="./run_benchmark.sh",\n  options={\n    "threads": 1,\n  },\n  parallelizable=False,\n  deps=[\n    ":compile",\n  ],\n)\n\nrun_experiment(\n  name="sweep-2",\n  run="./run_benchmark.sh",\n  options={\n    "threads": 2,\n  },\n  parallelizable=False,\n  deps=[\n    ":compile",\n    ":sweep-1",\n  ],\n)\n\ncombine(\n  name="sweep",\n  deps=[\n    ":sweep-1",\n    ":sweep-2",\n  ],\n)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var t=s(6540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);