# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import conductor.envs.proto_gen.maestro_pb2 as maestro__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in maestro_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MaestroStub(object):
    """Conductor's remote daemon service (Maestro).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnpackBundle = channel.unary_unary(
                '/conductor.Maestro/UnpackBundle',
                request_serializer=maestro__pb2.UnpackBundleRequest.SerializeToString,
                response_deserializer=maestro__pb2.UnpackBundleResult.FromString,
                _registered_method=True)
        self.ExecuteTask = channel.unary_unary(
                '/conductor.Maestro/ExecuteTask',
                request_serializer=maestro__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=maestro__pb2.ExecuteTaskResult.FromString,
                _registered_method=True)
        self.UnpackTaskOutputs = channel.unary_unary(
                '/conductor.Maestro/UnpackTaskOutputs',
                request_serializer=maestro__pb2.UnpackTaskOutputsRequest.SerializeToString,
                response_deserializer=maestro__pb2.UnpackTaskOutputsResult.FromString,
                _registered_method=True)
        self.PackTaskOutputs = channel.unary_unary(
                '/conductor.Maestro/PackTaskOutputs',
                request_serializer=maestro__pb2.PackTaskOutputsRequest.SerializeToString,
                response_deserializer=maestro__pb2.PackTaskOutputsResult.FromString,
                _registered_method=True)
        self.Shutdown = channel.unary_unary(
                '/conductor.Maestro/Shutdown',
                request_serializer=maestro__pb2.ShutdownRequest.SerializeToString,
                response_deserializer=maestro__pb2.ShutdownResult.FromString,
                _registered_method=True)


class MaestroServicer(object):
    """Conductor's remote daemon service (Maestro).
    """

    def UnpackBundle(self, request, context):
        """Used to initialize a repository (workspace) for the current project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTask(self, request, context):
        """Used to execute a Conductor task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnpackTaskOutputs(self, request, context):
        """Used to unpack an archive containing task outputs. These are usually the
        inputs required for a task that we intend to execute in this remote
        environment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PackTaskOutputs(self, request, context):
        """Used to pack task outputs into an archive. These are the outputs of a task
        that we ran in this remote environment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Shutdown(self, request, context):
        """Tell the daemon to shut down.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MaestroServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnpackBundle': grpc.unary_unary_rpc_method_handler(
                    servicer.UnpackBundle,
                    request_deserializer=maestro__pb2.UnpackBundleRequest.FromString,
                    response_serializer=maestro__pb2.UnpackBundleResult.SerializeToString,
            ),
            'ExecuteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=maestro__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=maestro__pb2.ExecuteTaskResult.SerializeToString,
            ),
            'UnpackTaskOutputs': grpc.unary_unary_rpc_method_handler(
                    servicer.UnpackTaskOutputs,
                    request_deserializer=maestro__pb2.UnpackTaskOutputsRequest.FromString,
                    response_serializer=maestro__pb2.UnpackTaskOutputsResult.SerializeToString,
            ),
            'PackTaskOutputs': grpc.unary_unary_rpc_method_handler(
                    servicer.PackTaskOutputs,
                    request_deserializer=maestro__pb2.PackTaskOutputsRequest.FromString,
                    response_serializer=maestro__pb2.PackTaskOutputsResult.SerializeToString,
            ),
            'Shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.Shutdown,
                    request_deserializer=maestro__pb2.ShutdownRequest.FromString,
                    response_serializer=maestro__pb2.ShutdownResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'conductor.Maestro', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('conductor.Maestro', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Maestro(object):
    """Conductor's remote daemon service (Maestro).
    """

    @staticmethod
    def UnpackBundle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/conductor.Maestro/UnpackBundle',
            maestro__pb2.UnpackBundleRequest.SerializeToString,
            maestro__pb2.UnpackBundleResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/conductor.Maestro/ExecuteTask',
            maestro__pb2.ExecuteTaskRequest.SerializeToString,
            maestro__pb2.ExecuteTaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnpackTaskOutputs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/conductor.Maestro/UnpackTaskOutputs',
            maestro__pb2.UnpackTaskOutputsRequest.SerializeToString,
            maestro__pb2.UnpackTaskOutputsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PackTaskOutputs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/conductor.Maestro/PackTaskOutputs',
            maestro__pb2.PackTaskOutputsRequest.SerializeToString,
            maestro__pb2.PackTaskOutputsResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/conductor.Maestro/Shutdown',
            maestro__pb2.ShutdownRequest.SerializeToString,
            maestro__pb2.ShutdownResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
