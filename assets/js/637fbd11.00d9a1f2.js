"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[27],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?i.createElement(f,o(o({ref:n},p),{},{components:t})):i.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9389:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],l={title:"include()",id:"include"},c=void 0,s={unversionedId:"directives/include",id:"directives/include",title:"include()",description:'The include() directive allows you to "include" a separate file in a COND',source:"@site/docs/directives/include.md",sourceDirName:"directives",slug:"/directives/include",permalink:"/conductor/directives/include",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/directives/include.md",tags:[],version:"current",frontMatter:{title:"include()",id:"include"},sidebar:"docs",previous:{title:"Directives",permalink:"/conductor/directives"},next:{title:"Command Line Interface",permalink:"/conductor/cli"}},p=[{value:"Arguments",id:"arguments",children:[{value:"<code>path</code>",id:"path",children:[],level:3}],level:2},{value:"Usage Example",id:"usage-example",children:[],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"include(path)\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"include()"),' directive allows you to "include" a separate file in a ',(0,a.kt)("inlineCode",{parentName:"p"},"COND"),"\nfile. The primary use case for ",(0,a.kt)("inlineCode",{parentName:"p"},"include()")," is when you want to share common\nconfiguration values among multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"COND")," files (for use across multiple task\ndefinitions). You can define the configuration values in a single file, and then\n",(0,a.kt)("inlineCode",{parentName:"p"},"include()")," that file in every relevant ",(0,a.kt)("inlineCode",{parentName:"p"},"COND")," file."),(0,a.kt)("p",null,"When encountering an ",(0,a.kt)("inlineCode",{parentName:"p"},"include()")," directive, Conductor will interpret the\nincluded file as a Python program. Any symbols (e.g., variables, functions)\ndefined in the included file will be usable inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"COND")," file. A ",(0,a.kt)("inlineCode",{parentName:"p"},"COND"),"\nfile can ",(0,a.kt)("inlineCode",{parentName:"p"},"include()")," as many other files as needed. Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"include()"),"\ndirectives are processed in the order they are written in the ",(0,a.kt)("inlineCode",{parentName:"p"},"COND")," file (i.e.,\nfrom top to bottom)."),(0,a.kt)("p",null,"Included files are meant to be used to share configuration values. As a result,\nincluded files cannot ",(0,a.kt)("inlineCode",{parentName:"p"},"include()")," other files (i.e., nested ",(0,a.kt)("inlineCode",{parentName:"p"},"include()"),"s are not\nsupported). An included file also cannot define any tasks. Included files must\nalso be ",(0,a.kt)("em",{parentName:"p"},"deterministic")," (i.e., they must always produce the same results each\ntime they are evaluated). These restrictions are meant to keep ",(0,a.kt)("inlineCode",{parentName:"p"},"include()"),"\ndirectives simple to reason about."),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("h3",{id:"path"},(0,a.kt)("inlineCode",{parentName:"h3"},"path")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,a.kt)("p",null,"The path to the file to include, which will be interpreted as a Python program.\nTo distinguish Conductor includes from regular Python programs, all included\nfiles must have a ",(0,a.kt)("inlineCode",{parentName:"p"},".cond")," extension."),(0,a.kt)("p",null,"Paths can be specified either (i) relative to the ",(0,a.kt)("inlineCode",{parentName:"p"},"COND")," file's location, or\n(ii) relative to the project root. To specify a path relative to the project\nroot, use ",(0,a.kt)("inlineCode",{parentName:"p"},"//")," to indicate the project root (see the usage example below)."),(0,a.kt)("h2",{id:"usage-example"},"Usage Example"),(0,a.kt)("p",null,"In the example below, we define two ",(0,a.kt)("inlineCode",{parentName:"p"},"run_experiment()")," tasks in separate ",(0,a.kt)("inlineCode",{parentName:"p"},"COND"),"\nfiles. However, both tasks share configuration values that are defined in\n",(0,a.kt)("inlineCode",{parentName:"p"},"common.cond"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=experiments/common.cond",title:"experiments/common.cond"},"# Common configuration values.\nREPETITIONS = 3\nTHREADS = 2 * 8\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=experiments/baseline/COND {2}",title:"experiments/baseline/COND","{2}":!0},'# Include `common.cond` using a relative path.\ninclude("../common.cond")\n\nrun_experiment(\n  name="baseline",\n  run="./evaluate_baseline.sh",\n  options={\n    "repetitions": REPETITIONS,\n    "threads": THREADS,\n  },\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=experiments/new_system/COND {2}",title:"experiments/new_system/COND","{2}":!0},'# Include `common.cond` using a path relative to the project root.\ninclude("//experiments/common.cond")\n\nrun_experiment(\n  name="new_system",\n  run="./evaluate_new_system.sh",\n  options={\n    "repetitions": REPETITIONS,\n    "threads": THREADS,\n  },\n)\n')))}d.isMDXComponent=!0}}]);