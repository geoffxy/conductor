syntax = "proto3";

package conductor;

// Conductor's remote daemon service (Maestro).
service Maestro {
  // Used to initialize a repository (workspace) for the current project.
  rpc UnpackBundle(UnpackBundleRequest) returns (UnpackBundleResult) {}

  // Used to execute a Conductor task.
  rpc ExecuteTask(ExecuteTaskRequest) returns (ExecuteTaskResult) {}

  // Used to unpack an archive containing task outputs. These are usually the
  // inputs required for a task that we intend to execute in this remote
  // environment.
  rpc UnpackTaskOutputs(UnpackTaskOutputsRequest) returns (UnpackTaskOutputsResult) {}

  // Used to pack task outputs into an archive. These are the outputs of a task
  // that we ran in this remote environment.
  rpc PackTaskOutputs(PackTaskOutputsRequest) returns (PackTaskOutputsResult) {}

  // Tell the daemon to shut down.
  rpc Shutdown(ShutdownRequest) returns (ShutdownResult) {}
}

message ConductorError {
  int32 code = 1;
  repeated ErrorKwarg kwargs = 2;

  string file_context_path = 3;
  int32 file_context_line_number = 4;
  string extra_context = 5;
}

message ErrorKwarg {
  string key = 1;
  string value = 2;
}

message UnpackBundleRequest {
  // A path to the bundle file (relative to the maestro root).
  string bundle_path = 1;
}

message UnpackBundleResponse {
  // A unique identifier for the unpacked bundle (workspace). We use this to
  // differentiate between different copies of the same repository.
  string workspace_name = 1;
}

message UnpackBundleResult {
  oneof result {
    UnpackBundleResponse response = 1;
    ConductorError error = 2;
  }
}

message ExecuteTaskRequest {
  // The workspace that contains this task.
  string workspace_name = 1;

  // A relative path to the Conductor project root within the workspace. The
  // project root is not necessarily the same as the workspace root, but often
  // can be the same.
  string project_root = 2;

  // The fully qualified task identifier of the task to run.
  string task_identifier = 3;

  // For task dependencies that are versioned, this contains the version to use.
  // Note that unversioned dependencies (i.e., `run_command()` dependencies) are
  // not included here.
  repeated TaskDependency dep_versions = 4;

  // The type of task to run.
  ExecuteTaskType execute_task_type = 5;

  // If the task is a `run_experiment()` task, this must contain the result
  // version to create. Otherwise, it will be empty.
  TaskVersion result_version = 6;
}

enum ExecuteTaskType {
  TT_UNSPECIFIED = 0;
  TT_RUN_EXPERIMENT = 1;
  TT_RUN_COMMAND = 2;
}

enum ArchiveType {
  AT_UNSPECIFIED = 0;
  AT_GZIP = 1;
  AT_ZSTD = 2;
}

message TaskDependency {
  string task_identifier = 1;
  TaskVersion version = 2;
}

message TaskVersion {
  uint64 timestamp = 1;
  string commit_hash = 2;
  bool has_uncommitted_changes = 3;
}

message TaskWithVersion {
  string task_identifier = 1;
  TaskVersion version = 2;
}

message ExecuteTaskResponse {
  uint64 start_timestamp = 1;
  uint64 end_timestamp = 2;
}

message ExecuteTaskResult {
  oneof result {
    ExecuteTaskResponse response = 1;
    ConductorError error = 2;
  }
}

message UnpackTaskOutputsRequest {
  // The workspace that contains this task.
  string workspace_name = 1;

  // A relative path to the Conductor project root within the workspace. The
  // project root is not necessarily the same as the workspace root, but often
  // can be the same.
  string project_root = 2;

  // The path to the archive containing the task outputs.
  string task_archive_path = 3;

  // The type of archive to unpack.
  ArchiveType archive_type = 4;
}

message UnpackTaskOutputsResult {
  oneof result {
    UnpackTaskOutputsResponse response = 1;
    ConductorError error = 2;
  }
}

message UnpackTaskOutputsResponse {
  uint64 num_unpacked_tasks = 1;
}

message PackTaskOutputsRequest {
  // The workspace that contains this task.
  string workspace_name = 1;

  // A relative path to the Conductor project root within the workspace. The
  // project root is not necessarily the same as the workspace root, but often
  // can be the same.
  string project_root = 2;

  // The versioned tasks to pack.
  repeated TaskWithVersion versioned_tasks = 3;

  // The unversioned tasks to pack.
  repeated string unversioned_task_identifiers = 4;

  // The type of archive to create.
  ArchiveType archive_type = 5;
}

message PackTaskOutputsResult {
  oneof result {
    PackTaskOutputsResponse response = 1;
    ConductorError error = 2;
  }
}

message PackTaskOutputsResponse {
  uint64 num_packed_tasks = 1;
  // The path to the archive containing the packed task outputs.
  string task_archive_path = 2;
}

message ShutdownRequest { string key = 1; }

message ShutdownResponse { string message = 1; }

message ShutdownResult {
  oneof result {
    ShutdownResponse response = 1;
    ConductorError error = 2;
  }
}
