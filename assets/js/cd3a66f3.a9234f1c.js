"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[607],{6805:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=t(4848),r=t(8453);const i={title:"Task Types",id:"task-types"},a=void 0,o={id:"task-types",title:"Task Types",description:"The subpages in this section describe Conductor's task types in detail. This",source:"@site/docs/task-types.md",sourceDirName:".",slug:"/task-types",permalink:"/conductor/task-types",draft:!1,unlisted:!1,editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types.md",tags:[],version:"current",frontMatter:{title:"Task Types",id:"task-types"},sidebar:"docs",previous:{title:"Overview",permalink:"/conductor/"},next:{title:"run_experiment()",permalink:"/conductor/task-types/run-experiment"}},c={},d=[{value:"Kinds of Task Types",id:"kinds-of-task-types",level:2},{value:"Experiment Task Types",id:"experiment-task-types",level:3},{value:"Non-Experiment Task Types",id:"non-experiment-task-types",level:3},{value:"Task Environment Variables",id:"task-environment-variables",level:2},{value:"<code>COND_OUT</code>",id:"cond_out",level:3},{value:"<code>COND_DEPS</code>",id:"cond_deps",level:3},{value:"<code>COND_NAME</code>",id:"cond_name",level:3},{value:"<code>COND_SLOT</code>",id:"cond_slot",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The subpages in this section describe Conductor's task types in detail. This\npage outlines the common concepts among all task types."}),"\n",(0,s.jsx)(n.h2,{id:"kinds-of-task-types",children:"Kinds of Task Types"}),"\n",(0,s.jsx)(n.p,{children:"At a high level, Conductor has two kinds of task types: experiment task types,\nand non-experiment task types."}),"\n",(0,s.jsx)(n.h3,{id:"experiment-task-types",children:"Experiment Task Types"}),"\n",(0,s.jsxs)(n.p,{children:["Experiment task types (",(0,s.jsx)(n.a,{href:"/conductor/task-types/run-experiment",children:(0,s.jsx)(n.code,{children:"run_experiment()"})})," and\n",(0,s.jsx)(n.a,{href:"/conductor/task-types/run-experiment-group",children:(0,s.jsx)(n.code,{children:"run_experiment_group()"})}),") are used to\nlaunch scripts or executables that produce results for your research. For\nexample, a benchmark script that you run to collect performance results for your\nproject should be encoded as a ",(0,s.jsx)(n.code,{children:"run_experiment()"})," task."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Special handling."}),"\nConductor distinguishes between experiment task types and non-experiment task\ntypes because it does a few extra things for experiment tasks that are typically\nnot needed for non-experiment tasks. For experiment tasks, Conductor will\nautomatically"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Record the arguments and options passed to the task's executable"}),"\n",(0,s.jsx)(n.li,{children:"Record the task executable's standard out and standard error streams"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Versioning."}),"\nThe outputs of an experiment task (e.g., the collected performance results) are\nalso versioned and ",(0,s.jsx)(n.a,{href:"/conductor/cli/archive",children:"archivable"}),". The reference page for\n",(0,s.jsx)(n.a,{href:"/conductor/task-types/run-experiment",children:(0,s.jsx)(n.code,{children:"run_experiment()"})})," provides more details about\nwhat this means."]}),"\n",(0,s.jsx)(n.h3,{id:"non-experiment-task-types",children:"Non-Experiment Task Types"}),"\n",(0,s.jsx)(n.p,{children:"All other Conductor task types are non-experiment task types. The semantics of\neach non-experiment task type are described in each task type's reference page."}),"\n",(0,s.jsxs)(n.p,{children:["Non-experiment task types are typically used to orchestrate the environment\nsetup and data transformation steps of your research computing pipeline. For\nexample, a script that takes raw experiment results and generates a graph should\nbe encoded as a ",(0,s.jsx)(n.a,{href:"/conductor/task-types/run-command",children:(0,s.jsx)(n.code,{children:"run_command()"})})," task."]}),"\n",(0,s.jsx)(n.h2,{id:"task-environment-variables",children:"Task Environment Variables"}),"\n",(0,s.jsx)(n.p,{children:"When running a task, Conductor will set a number of environment variables. These\nenvironment variables are used to provide information to the task executable."}),"\n",(0,s.jsx)(n.h3,{id:"cond_out",children:(0,s.jsx)(n.code,{children:"COND_OUT"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"COND_OUT"})," environment variable is set to an absolute path where the task\nexecutable should write its output file(s). This variable is always set (i.e.,\nit is set for all tasks)."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["When orchestrating your computing pipeline with Conductor, it is ",(0,s.jsx)(n.em,{children:"very\nimportant"})," to make sure your executables write their outputs to the path given\nby ",(0,s.jsx)(n.code,{children:"COND_OUT"}),". Doing so ensures that any dependent tasks will be able to find\ntheir dependencies' outputs. For experiment tasks, writing your outputs to\n",(0,s.jsx)(n.code,{children:"COND_OUT"})," ensures that your experiment results can be versioned and archived\ncorrectly."]})}),"\n",(0,s.jsx)(n.h3,{id:"cond_deps",children:(0,s.jsx)(n.code,{children:"COND_DEPS"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"COND_DEPS"})," environment variable is set to a string of colon (",(0,s.jsx)(n.code,{children:":"}),") separated\nabsolute paths to the task's dependencies' outputs. If the task has no\ndependencies, this variable will be set to an empty string."]}),"\n",(0,s.jsxs)(n.p,{children:["The purpose of this environment variable is to enable a task to find the output\nfiles of its dependencies. For example, suppose ",(0,s.jsx)(n.code,{children:"task-1"})," lists ",(0,s.jsx)(n.code,{children:"task-a"})," and\n",(0,s.jsx)(n.code,{children:"task-b"})," as its dependencies. Suppose that ",(0,s.jsx)(n.code,{children:"task-a"}),"'s output path is ",(0,s.jsx)(n.code,{children:"/task-a"}),"\nand ",(0,s.jsx)(n.code,{children:"task-b"}),"'s output path is ",(0,s.jsx)(n.code,{children:"/task-b"}),". Then when ",(0,s.jsx)(n.code,{children:"task-1"})," runs, ",(0,s.jsx)(n.code,{children:"COND_DEPS"}),"\nwill be set to ",(0,s.jsx)(n.code,{children:"/task-a:/task-b"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"cond_name",children:(0,s.jsx)(n.code,{children:"COND_NAME"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"COND_NAME"})," environment variable is set to the task's name. This variable is\nalways set."]}),"\n",(0,s.jsx)(n.h3,{id:"cond_slot",children:(0,s.jsx)(n.code,{children:"COND_SLOT"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"COND_SLOT"})," environment variable is set when the task ",(0,s.jsx)(n.em,{children:"may"})," be executing in\nparallel. When set, ",(0,s.jsx)(n.code,{children:"COND_SLOT"})," will have a non-negative integer value that is\nless than the maximum number of parallel tasks allowed (set using the ",(0,s.jsx)(n.code,{children:"--jobs"}),"\nflag, see the reference for ",(0,s.jsx)(n.a,{href:"/conductor/cli/run",children:(0,s.jsx)(n.code,{children:"cond run"})}),"). For example, if ",(0,s.jsx)(n.code,{children:"--jobs"}),"\nwas set to 3, ",(0,s.jsx)(n.code,{children:"COND_SLOT"})," will only be either 0, 1, or 2."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"COND_SLOT"})," will only be set if the task is parallelizable (specified by setting\nthe ",(0,s.jsx)(n.code,{children:"parallelizable"})," argument when defining the task, see\n",(0,s.jsx)(n.a,{href:"/conductor/task-types/run-experiment",children:(0,s.jsx)(n.code,{children:"run_experiment()"})}),"). Conductor guarantees that\nall tasks running in parallel will have distinct values of ",(0,s.jsx)(n.code,{children:"COND_SLOT"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["One use case for ",(0,s.jsx)(n.code,{children:"COND_SLOT"})," is to ensure tasks executing in parallel are\nscheduled on different CPU cores. For example, a task executable may request to\nbe pinned on a specific core based on the value of ",(0,s.jsx)(n.code,{children:"COND_SLOT"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);