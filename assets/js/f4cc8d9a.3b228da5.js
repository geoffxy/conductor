"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[853],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||o;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5562:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],p={title:"Python Support Library",id:"python-support-library"},s=void 0,u={unversionedId:"python-support-library",id:"python-support-library",title:"Python Support Library",description:"Conductor includes a Python library that provides utilities for tasks that are",source:"@site/docs/python-support-library.md",sourceDirName:".",slug:"/python-support-library",permalink:"/conductor/python-support-library",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/python-support-library.md",tags:[],version:"current",frontMatter:{title:"Python Support Library",id:"python-support-library"},sidebar:"docs",previous:{title:"Configuration",permalink:"/conductor/configuration"}},l=[{value:"Path Utilities",id:"path-utilities",children:[{value:"<code>get_deps_paths()</code>",id:"get_deps_paths",children:[],level:3},{value:"<code>get_output_path()</code>",id:"get_output_path",children:[],level:3}],level:2},{value:"Usage Example",id:"usage-example",children:[{value:"<code>in_output_dir()</code>",id:"in_output_dir",children:[],level:3}],level:2}],c={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Conductor includes a Python library that provides utilities for tasks that are\nimplemented as Python scripts. For example, you might use a Python script to\nprocess experiment results, transform data, or create figures. As long as you\nhave installed Conductor, you can access the Python library by importing\n",(0,o.kt)("inlineCode",{parentName:"p"},"conductor.lib"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import conductor.lib as cond\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The functions in this library are meant to be called in scripts that are\nlaunched by Conductor. If used in scripts that are ",(0,o.kt)("em",{parentName:"p"},"not")," launched by Conductor,\nthese library functions will raise ",(0,o.kt)("inlineCode",{parentName:"p"},"RuntimeError")," exceptions."))),(0,o.kt)("h2",{id:"path-utilities"},"Path Utilities"),(0,o.kt)("h3",{id:"get_deps_paths"},(0,o.kt)("inlineCode",{parentName:"h3"},"get_deps_paths()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_deps_paths() -> List[pathlib.Path]\n")),(0,o.kt)("p",null,"Returns a list of this task's dependencies' output paths. If the task has no\ndependencies, the returned list will be empty."),(0,o.kt)("h3",{id:"get_output_path"},(0,o.kt)("inlineCode",{parentName:"h3"},"get_output_path()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_output_path() -> pathlib.Path\n")),(0,o.kt)("p",null,"Returns the path where this task should write its output files."),(0,o.kt)("h2",{id:"usage-example"},"Usage Example"),(0,o.kt)("p",null,"The following code snippets provide an example of how you can use Conductor's\nPython library to retrieve the location of dependent tasks' outputs as well as\nthe task's output path."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="COND"',title:'"COND"'},'run_experiment(\n  name="benchmark_1",\n  run="./run_benchmark_1.sh",\n)\n\nrun_experiment(\n  name="benchmark_2",\n  run="./run_benchmark_2.sh",\n)\n\nrun_command(\n  name="combine",\n  run="python combine_results.py",\n  deps=[\n    ":benchmark_1",\n    ":benchmark_2",\n  ],\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="combine_results.py" {10,16}',title:'"combine_results.py"',"{10,16}":!0},'import conductor.lib as cond\nimport pandas as pd\n\n\ndef main():\n    """\n    Combines the CSV files written by this task\'s dependencies.\n    """\n    results = []\n    deps = cond.get_deps_paths()\n\n    for dep_path in deps:\n        results.append(pd.read_csv(dep_path / "measurements.csv"))\n    combined = pd.concat(results, ignore_index=True)\n\n    out_dir = cond.get_output_path()\n    combined.to_csv(out_dir / "combined.csv", index=False)\n\n\nif __name__ == "__main__":\n    main()\n')),(0,o.kt)("h3",{id:"in_output_dir"},(0,o.kt)("inlineCode",{parentName:"h3"},"in_output_dir()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def in_output_dir(file_path: path.Path | str) -> pathlib.Path\n")),(0,o.kt)("p",null,"If the current script is being run by Conductor, this function amends\n",(0,o.kt)("inlineCode",{parentName:"p"},"file_path")," to make it fall under where Conductor's task outputs should be\nstored. Otherwise, this function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"file_path")," unchanged (but as a\n",(0,o.kt)("inlineCode",{parentName:"p"},"pathlib.Path"),")."),(0,o.kt)("p",null,"This is meant to be useful for scripts that may be run independently of\nConductor. Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"file_path")," should be a relative path."))}d.isMDXComponent=!0}}]);