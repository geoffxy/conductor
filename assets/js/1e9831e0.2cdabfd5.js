"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[221],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4801:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],p={title:"group()",id:"group"},s=void 0,u={unversionedId:"task-types/group",id:"task-types/group",title:"group()",description:'The purpose of a group() task is to "assign" a task identifier to a group of',source:"@site/docs/task-types/group.md",sourceDirName:"task-types",slug:"/task-types/group",permalink:"/conductor/task-types/group",editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/group.md",tags:[],version:"current",frontMatter:{title:"group()",id:"group"},sidebar:"docs",previous:{title:"combine()",permalink:"/conductor/task-types/combine"},next:{title:"run_experiment_group()",permalink:"/conductor/task-types/run-experiment-group"}},l=[{value:"Arguments",id:"arguments",children:[{value:"<code>name</code>",id:"name",children:[],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3}],level:2},{value:"Usage Example",id:"usage-example",children:[],level:2}],c={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"group(name, deps=[])\n")),(0,o.kt)("p",null,"The purpose of a ",(0,o.kt)("inlineCode",{parentName:"p"},"group()"),' task is to "assign" a task identifier to a ',(0,o.kt)("em",{parentName:"p"},"group")," of\nother tasks. A ",(0,o.kt)("inlineCode",{parentName:"p"},"group()")," task allows you to tell Conductor to run multiple tasks\nwhile only referring to a single task identifier."),(0,o.kt)("p",null,"One use case for a ",(0,o.kt)("inlineCode",{parentName:"p"},"group()")," task is when you have a list of tasks that are\nusually run together (e.g., a series of tasks that comprise a benchmark suite).\nIn this scenario, you can use a ",(0,o.kt)("inlineCode",{parentName:"p"},"group()")," task to make it more convenient to run\nall of the tasks in the suite."),(0,o.kt)("p",null,"The difference between ",(0,o.kt)("inlineCode",{parentName:"p"},"group()")," and ",(0,o.kt)("a",{parentName:"p",href:"/conductor/task-types/combine"},(0,o.kt)("inlineCode",{parentName:"a"},"combine()"))," is\nthat ",(0,o.kt)("inlineCode",{parentName:"p"},"combine()")," takes the additional step of copying its dependencies' outputs\ninto a single output directory (a ",(0,o.kt)("inlineCode",{parentName:"p"},"group()")," task does not do this step)."),(0,o.kt)("h2",{id:"arguments"},"Arguments"),(0,o.kt)("h3",{id:"name"},(0,o.kt)("inlineCode",{parentName:"h3"},"name")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Type:")," String (required)"),(0,o.kt)("p",null,"The task's name. This name must be unique within the task's ",(0,o.kt)("inlineCode",{parentName:"p"},"COND")," file. A task\nname can only contain letters, numbers, hyphens (",(0,o.kt)("inlineCode",{parentName:"p"},"-"),"), and underscores (",(0,o.kt)("inlineCode",{parentName:"p"},"_"),")."),(0,o.kt)("h3",{id:"deps"},(0,o.kt)("inlineCode",{parentName:"h3"},"deps")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Type:")," List of task identifiers (default: ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),")"),(0,o.kt)("p",null,'A list of task identifiers that should be executed when this task is requested\nto be executed (i.e., the tasks that should be part of this "group").'),(0,o.kt)("p",null,"When listing tasks defined in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"COND")," file, you can just specify the\ntask's name prefixed by a colon (e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},":compile")," would refer to a task named\n",(0,o.kt)("inlineCode",{parentName:"p"},"compile")," defined in the same file). If you need to list a task defined in a\ndifferent ",(0,o.kt)("inlineCode",{parentName:"p"},"COND")," file, you must specify the fully qualified task identifier\n(e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"//experiments:benchmark")," would refer to a task named ",(0,o.kt)("inlineCode",{parentName:"p"},"benchmark")," defined\nin the ",(0,o.kt)("inlineCode",{parentName:"p"},"COND")," file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"experiments")," directory)."),(0,o.kt)("h2",{id:"usage-example"},"Usage Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="COND"',title:'"COND"'},'group(\n  name="run_all_benchmarks",\n  deps=[\n    ":benchmark_a",\n    ":benchmark_b",\n  ],\n)\n')))}d.isMDXComponent=!0}}]);