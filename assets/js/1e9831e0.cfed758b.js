"use strict";(self.webpackChunkconductor=self.webpackChunkconductor||[]).push([[713],{5393:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var s=t(4848),o=t(8453);const r={title:"group()",id:"group"},i=void 0,d={id:"task-types/group",title:"group()",description:'The purpose of a group() task is to "assign" a task identifier to a group of',source:"@site/docs/task-types/group.md",sourceDirName:"task-types",slug:"/task-types/group",permalink:"/conductor/task-types/group",draft:!1,unlisted:!1,editUrl:"https://github.com/geoffxy/conductor/edit/master/website/docs/task-types/group.md",tags:[],version:"current",frontMatter:{title:"group()",id:"group"},sidebar:"docs",previous:{title:"combine()",permalink:"/conductor/task-types/combine"},next:{title:"run_experiment_group()",permalink:"/conductor/task-types/run-experiment-group"}},c={},a=[{value:"Arguments",id:"arguments",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>deps</code>",id:"deps",level:3},{value:"Usage Example",id:"usage-example",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"group(name, deps=[])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The purpose of a ",(0,s.jsx)(n.code,{children:"group()"}),' task is to "assign" a task identifier to a ',(0,s.jsx)(n.em,{children:"group"})," of\nother tasks. A ",(0,s.jsx)(n.code,{children:"group()"})," task allows you to tell Conductor to run multiple tasks\nwhile only referring to a single task identifier."]}),"\n",(0,s.jsxs)(n.p,{children:["One use case for a ",(0,s.jsx)(n.code,{children:"group()"})," task is when you have a list of tasks that are\nusually run together (e.g., a series of tasks that comprise a benchmark suite).\nIn this scenario, you can use a ",(0,s.jsx)(n.code,{children:"group()"})," task to make it more convenient to run\nall of the tasks in the suite."]}),"\n",(0,s.jsxs)(n.p,{children:["The difference between ",(0,s.jsx)(n.code,{children:"group()"})," and ",(0,s.jsx)(n.a,{href:"/conductor/task-types/combine",children:(0,s.jsx)(n.code,{children:"combine()"})})," is\nthat ",(0,s.jsx)(n.code,{children:"combine()"})," takes the additional step of copying its dependencies' outputs\ninto a single output directory (a ",(0,s.jsx)(n.code,{children:"group()"})," task does not do this step)."]}),"\n",(0,s.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsx)(n.h3,{id:"name",children:(0,s.jsx)(n.code,{children:"name"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," String (required)"]}),"\n",(0,s.jsxs)(n.p,{children:["The task's name. This name must be unique within the task's ",(0,s.jsx)(n.code,{children:"COND"})," file. A task\nname can only contain letters, numbers, hyphens (",(0,s.jsx)(n.code,{children:"-"}),"), and underscores (",(0,s.jsx)(n.code,{children:"_"}),")."]}),"\n",(0,s.jsx)(n.h3,{id:"deps",children:(0,s.jsx)(n.code,{children:"deps"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type:"})," List of task identifiers (default: ",(0,s.jsx)(n.code,{children:"[]"}),")"]}),"\n",(0,s.jsx)(n.p,{children:'A list of task identifiers that should be executed when this task is requested\nto be executed (i.e., the tasks that should be part of this "group").'}),"\n",(0,s.jsxs)(n.p,{children:["When listing tasks defined in the same ",(0,s.jsx)(n.code,{children:"COND"})," file, you can just specify the\ntask's name prefixed by a colon (e.g., ",(0,s.jsx)(n.code,{children:":compile"})," would refer to a task named\n",(0,s.jsx)(n.code,{children:"compile"})," defined in the same file). If you need to list a task defined in a\ndifferent ",(0,s.jsx)(n.code,{children:"COND"})," file, you must specify the fully qualified task identifier\n(e.g., ",(0,s.jsx)(n.code,{children:"//experiments:benchmark"})," would refer to a task named ",(0,s.jsx)(n.code,{children:"benchmark"})," defined\nin the ",(0,s.jsx)(n.code,{children:"COND"})," file in the ",(0,s.jsx)(n.code,{children:"experiments"})," directory)."]}),"\n",(0,s.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="COND"',children:'group(\n  name="run_all_benchmarks",\n  deps=[\n    ":benchmark_a",\n    ":benchmark_b",\n  ],\n)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);